#!/bin/bash
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License version 2 as
#  published by the Free Software Foundation.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#  See the GNU General Public License for more details.

function print_cmd_help {
	case "${1}" in
		add)
			cat << EOF
add -n <container name> -f <rootfs tarball> [-a] [-g group] [-t num] [-s] [-P] [-b] [-S tty console dev] [-m monitor container] [-v vty number]

Adds a new container which doesn't already exist.
EOF
			;;
		delete)
			cat << EOF
delete -n <container name>

Completely removes a container including all versions of it
EOF
			;;
		clean)
			cat << EOF
clean -n <container name>

Removes any container versions which are not current and do
not show up in the rollback history.
EOF
			;;
		histdel)
			cat << EOF
histdel -n <container name> -i <history index> [-r]

Removes an entry from the history which is the rollback list for the
container.  If -r is given, it also removes that container version.
EOF
			;;
		histlist)
			cat << EOF
histlist -n <container name>

Displays the history list for the container in rollback order.
EOF
			;;
		list)
			cat << EOF
list

Displays a list of all containers and versions.
Special characters at the beginning of the line designate container
characteristics:
0 = in domain0
a = set to autostart
h = in the rollback history
@ = the current version
r = running
EOF
			;;
		rollback)
			cat << EOF
rollback -n <container name> [-r]

Switches the current container version to be the one at the top of
the history rollback list.  On success, the entry is removed
from the history list.  If -r is given, the previous container version that
was just switched out, is completely removed from the system.
EOF
			;;
		snapshot)
			cat << EOF
snapshot -n <container name>

Takes a snapshot of the current container version and places that on
the top of the rollback history list.  If you take a snapshot before doing
something risky or experimental to the current container, you can
easily rollback.
EOF
			;;
		upgrade)
			cat << EOF
upgrade -n <container name> -f <rootfs tarball> [-a] [-g group] [-r] [-t num]

Unpacks a new version of an existing container, and switches the current
to be it.  If the container is running, you will be asked if you want
to stop, switch, then restart it.  Upgrades will not happen if the
container is running, so if you don't confirm stopping it, the upgrade is
aborted.  If -r is not given, then the old version is placed at the top
of the history rollback list.  If -r is given, the old version is
removed from the system and is not available to rollback to.  Use -r
with caution.
EOF
			;;
		*)
			echo "Error: Unrecognized command ${1}"
			print_help
			;;
	esac

}

function print_help {
	cat << EOF
Syntax:  overc-cctl [command] [options]

If supplied options to a command are not applicable, they are
simply ignored.  In case of conflicting options, last one overrides previous.

Commands:

EOF
	for i in add delete clean histdel histlist list rollback snapshot upgrade; do
		print_cmd_help ${i}
		for j in {0..79}; do echo -n "-"; done
		echo
	done
	cat << EOF
Options summary:
-n [arg] : container name
-f [arg] : tarball containing rootfs in bz2 format
-g [arg] : container group.  default is "parked".
-t [arg] : number of lxc ttys, connect with lxc-console.  default is 6
-a       : set container to autostart
-p       : set container to peer start
-P       : set container to be privileged
-b       : use bridged networking
-d       : make container discoverable via avahi
-0       : short form for -n dom0 -g domain0 -a -t 1
-h       : print help
-r       : remove container completely from the system
-i       : history index
-F       : force option - ie disable prompts
-s       : container controlling tty console
-S [arg] : tty console device.  default is ttyS0
-m [arg] : monitor container controlled by dom0, default is cube-desktop
-v [arg] : specify the vty number to be used for login

Special container names:
dom0     : the domain0 container.  This brings the normal high level
           functionality to the system, typically at runlevel 5.  A
           normal system consists of a reduced host image running
           natively, with one container running called dom0.
           The dom0 container is autostarted at boot time
	   and runs in group domain0.  dom0 has no lxc console, and only
	   one lxc tty, since dom0 will run X on the host tty2.  Make
	   sure that a getty is not running on tty2 on the host.

Special group names:
domain0  : There should only be one container in this group, dom0.  At
           host startup, any group domain0 container with autostart set,
           will be started automatically by the host.  The domain0 group is
           always launched first at host startup.
onboot   : Any containers in this group will be automatically launched at
           host startup, if they have autostart set.  Similar to the domain0
           group, but unrestricted in terms of membership and running after
           domain0.
parked   : Any container created without a group specified will use this
           group.  It is not considered for launching at host startup.
EOF
}

function remove_from_inittab {
	if [ ! -e ${pathtocontainer}/rootfs/etc/inittab ]; then
		# Must be a systemd setup
		# Just return until we know how to modify the systemd equiv
		return 0
	fi
	sed -n '''/^'${1}':/!p''' ${pathtocontainer}/rootfs/etc/inittab >new-inittab
	cp new-inittab ${pathtocontainer}/rootfs/etc/inittab
	rm new-inittab
}

function create_lxc_config {
	temp_lxcbase=$lxcbase
	if $host_cross ; then
		lxcbase=$lxcbase_cross
	fi
	cat << EOF >${pathtocontainer}/config
lxc.utsname = ${cn}
lxc.rootfs = ${lxcbase}/${cn}/rootfs
lxc.autodev = 1
lxc.kmsg = 0
lxc.tty = ${tty_num}
lxc.pts = 0
lxc.mount = ${lxcbase}/${cn}/fstab
lxc.network.type = veth
lxc.network.name = veth0
lxc.network.script.up = /etc/lxc/ovs-up
lxc.network.script.down = /etc/lxc/ovs-down
lxc.hook.autodev = ${lxcbase}/${cn}/autodev
lxc.mount.entry = devpts ${lxcbase}/${cn}/rootfs/dev/pts devpts defaults 0 0
lxc.mount.entry = proc ${lxcbase}/${cn}/rootfs/proc    proc defaults 0 0
lxc.mount.entry = sysfs ${lxcbase}/${cn}/rootfs/sys     sysfs defaults 0 0
lxc.group = ${group}
lxc.start.auto = ${autostart}
wr.start.auto = ${peerstart}
EOF
	if [ ${bridged_net} == 1 ]; then
		sed -i '/^lxc.network.script.*$/d' ${pathtocontainer}/config
		sed -i '/^lxc.network.type.*$/a lxc.network.link = br0' \
		    ${pathtocontainer}/config
	fi
	if [ ${domain0} == 1 ]; then
		# Domain 0 wants to drive X onto a real console
		echo "lxc.console = none" >>${pathtocontainer}/config
	fi
	lxcbase=$temp_lxcbase
}

function create_lxc_fstab {
	# Make sure we have mountable directories on the host
	mkdir -p ${bindmntbase}/all
	mkdir -p ${bindmntbase}/${cn}

	if $host_cross ; then
		lxcbase=$lxcbase_cross
		bindmntbase=$bindmntbase_cross
        fi

	# special dom0 mounts (so nested containers can be launched)
	if [ "${cn}" == "dom0" ]; then
	    # This makes /opt/container/ available to dom0, so it can populate
	    # /opt/container/local and /opt/container/all as part of the launch process
	    # and have /opt/container in its mount namespace
	    echo "${bindmntbase} ${lxcbase}/${cn}/rootfs${bindmntbase}	none rw,bind,create=dir" >> ${pathtocontainer}/fstab
	    echo "${bindmntbase}/${cn} ${lxcbase}/${cn}/rootfs${bindmntbase}/local	none rw,bind,create=dir" >> ${pathtocontainer}/fstab

	    # make /var/lib/lxc/* available to dom0
	    echo "${lxcbase} ${lxcbase}/${cn}/rootfs/${lxcbase} none bind 0 0" >> ${pathtocontainer}/fstab
	    # make / be available as /essential/
	    echo "/ /var/lib/lxc/${cn}/rootfs/essential/ none rw,bind,create=dir 0 0" >> ${pathtocontainer}/fstab
	    # make /boot be available as to dom0 since the essential system's update/upgrade is done in dom0
	    echo "/boot /var/lib/lxc/${cn}/rootfs/boot/ none rw,bind 0 0" >> ${pathtocontainer}/fstab
	    # proc for namespace access to essential (required for nested containers)
	    echo "/proc/ ${lxcbase}/${cn}/rootfs/host/proc/ none rw,bind,create=dir 0 0" >> ${pathtocontainer}/fstab
	else
	    # Create the fstab
	    echo "${bindmntbase}/all	${lxcbase}/${cn}/rootfs${bindmntbase}/all	none ro,bind,create=dir"  >> ${pathtocontainer}/fstab
	    echo "${bindmntbase}/${cn}	${lxcbase}/${cn}/rootfs${bindmntbase}/local	none rw,bind,create=dir"  >> ${pathtocontainer}/fstab

	    # if we aren't dom0, then we'll be launched by dom0, so we need to have our
	    # directory created there (for the local container directory), or that nested container
	    # launch will fail
	    if [ -d $temp_lxcbase/dom0/rootfs/ ]; then
		mkdir -p ${temp_lxcbase}/dom0/rootfs/${bindmntbase}/${cn}
	    fi
	fi

	lxcbase=$temp_lxcbase
	bindmntbase=$temp_bindmntbase
}

function create_autodev_script {
	cat << EOF >${pathtocontainer}/autodev
#!/bin/bash

if [ ! -e \$LXC_ROOTFS_MOUNT ] ; then
	exit 1
fi

blacklist="console|core|fd|full|hugepages|initctl|log|lp0|lp1|lp2|lp3|mqueue|null|pts|random|shm|stderr|stdin|stdout|tty|urandom|zero"

# Populate the dev directory, avoiding anything in the blacklist
cd /dev ; cp -ua \`ls | egrep -v -e "^(\$blacklist)\\\$"\` \$LXC_ROOTFS_MOUNT/dev
EOF
	chmod 755 ${pathtocontainer}/autodev
}


function get_tmppath_by_container()
{
    local cn=$1
    local ret=""
    ret=`cat ${CNRECORD}|awk -F ":" '{if ( $1=="'${cn}'" )print $2}'`
    echo "${ret}"
}

function deploy_new_container {

	# Record the origin of the rootfs
	echo ${rootfs_fn} >${pathtocontainer}/rootfs.origin

	# Make mount points
	DEV=${pathtocontainer}/rootfs/dev
	mkdir -p $DEV/pts
	mkdir -p $DEV/shm

	# Remove some of the gettys from inittab
	remove_from_inittab S0
	if [ ${domain0} == 1 ]; then
		# tty1 is for lxc-console
		# tty7 is for X
		remove_from_inittab 2
		remove_from_inittab 3
		remove_from_inittab 4
		remove_from_inittab 5
		remove_from_inittab 6
	fi

	create_lxc_fstab

	create_lxc_config

	create_autodev_script

	if [ -n "$vty_num" ]; then
		#disable the autoTV
		sed -i "s/#NAutoVTs=.*$/NAutoVTs=0/g" ${pathtocontainer}/rootfs/etc/systemd/logind.conf
		sed -i "s/#ReserveVT=.*$/ReserveVT=0/g" ${pathtocontainer}/rootfs/etc/systemd/logind.conf
		gettys=$( ls ${pathtocontainer}/rootfs/etc/systemd/system/getty.target.wants/getty* )
		for k in ${gettys}; do
			ln -s -f /dev/null ${k}
		done
		ln -sf /lib/systemd/system/getty@.service ${pathtocontainer}/rootfs/etc/systemd/system/getty.target.wants/getty@tty${vty_num}.service
	fi

	# is avahi available in the container ?
	if [ -e "${pathtocontainer}/rootfs/etc/avahi/avahi-daemon.conf" ]; then
	    if [ ${discoverable} == 1 ]; then
		# most of the defaults are good enough in the avahi config file, just minor tweaks here
		echo "[INFO]: container ${cn} is discoverable via avhai"
		sed -i "s/^.*rlimit\-nproc=.*/# rlimit-nproc=3/" ${pathtocontainer}/rootfs/etc/avahi/avahi-daemon.conf
	    else
		sed -i "s/^.*disable\-publishing=.*/disable-publishing=yes/" ${pathtocontainer}/rootfs/etc/avahi/avahi-daemon.conf
	    fi
	else
	    if [ ${discoverable} == 1 ]; then
		echo "WARNING: container ${cn} is discoverable, but avahi was not found"
	    fi
	fi

	if [ $privileged -ne 1 ]; then
		ln -sf /dev/null ${pathtocontainer}/rootfs/etc/systemd/system/systemd-udevd.service
		ln -sf /dev/null ${pathtocontainer}/rootfs/etc/systemd/system/systemd-udevd-kernel.socket
		ln -sf /dev/null ${pathtocontainer}/rootfs/etc/systemd/system/systemd-udevd-control.socket
	fi
	
	if [ ${havettyconsole} == 1  ]; then
		# If container /dev is mounted by tmpfs (when lxc.autodev=1) then
		# systemd fails to start dev-ttyXXXX.device service and this causes
		# serial-getty@ttyXXXX.service fails to start.  Workaround for now
		# is to remove the dependency to dev-%i.device service.
		sed -i "s:After=dev-%i.device :After=:g" ${pathtocontainer}/rootfs/lib/systemd/system/serial-getty@.service

		# remove serial console in order to make cube-desktop login prompt appears
		serialconsoles=$( ls etc/systemd/system/getty.target.wants/serial-getty* )
		for k in ${serialconsoles}; do
		        ln -s -f /dev/null ${k}
		done

	else
		serialconsoles=$( ls ${pathtocontainer}/rootfs/etc/systemd/system/getty.target.wants/serial-getty* )
		# Mask out the container service serial-getty@${ttyconsoledev}.service
		for k in ${serialconsoles}; do
			ln -s -f /dev/null ${k}
		done
	fi

	#Remove the systemd's costly remount of the root partition from /etc/fstab,
	#and also remove API filesystems mounting from it, as systemd will mount them itself.
	sed -i '\/dev\/root/d' ${pathtocontainer}/rootfs/etc/fstab
	sed -i '/^proc/d' ${pathtocontainer}/rootfs/etc/fstab
	sed -i '/^devpts/d' ${pathtocontainer}/rootfs/etc/fstab
	sed -i '/^tmpfs/d' ${pathtocontainer}/rootfs/etc/fstab
	sed -i '/^usbdevfs/d' ${pathtocontainer}/rootfs/etc/fstab

	#Since lxc.network.name set the veth's name as veth0, thus we should 
	#Set the match name in 20-wired.network according to veth*.
	if [ -f ${pathtocontainer}/rootfs/etc/systemd/network/20-wired.network ]; then
		sed -i "s:^Name=.*$:Name=veth\*:" ${pathtocontainer}/rootfs/etc/systemd/network/20-wired.network
	fi

}

function get_container_attributes {
	autostart=0
	domain0=0
	current=0
	inhist=0
	name=${1%/*}
	vers=${1##*/}
	grep -q -e "lxc.start.auto[[:blank:]]*=[[:blank:]]*1" ${lxcbase}/${containers}/${1}/config
	if [ $? == 0 ]; then
		autostart=1
	fi
	grep -q -e "lxc.group[[:blank:]]*=[[:blank:]]*domain0" ${lxcbase}/${containers}/${1}/config
	if [ $? == 0 ]; then
		domain0=1
	fi
	ls -l ${lxcbase} | grep -q "${1}"
	if [ $? == 0 ]; then
		current=1
	fi
	ls -l ${lxcbase}/${meta}/${name}/history 2>/dev/null | grep -q "${1}"
	if [ $? == 0 ]; then
		inhist=1
	fi
	check_active ${name}
}

function get_cont_list {
	cd ${lxcbase}/${containers}
	if [ "$( ls )" == "" ]; then
		echo "No containers found"
		exit 0
	fi
	contlist=$( ls -1dr */* )
	cd - >/dev/null
}

function list_containers {
	get_cont_list
	for i in ${contlist}; do
		get_container_attributes ${i}
		if [ ${domain0} == 1 ]; then
			echo -n "0"
		else
			echo -n "-"
		fi
		if [ ${autostart} == 1 ]; then
			echo -n "a"
		else
			echo -n "-"
		fi
		if [ ${inhist} == 1 ]; then
			echo -n "h"
		else
			echo -n "-"
		fi
		if [ ${current} == 1 ]; then
			echo -n "@"
			if [ ${active} == 1 ]; then
				echo -n "r"
			else
				echo -n "-"
			fi
		else
			echo -n "--"
		fi
		echo -n "  ${i}  "
		echo `date -d @${vers}`
	done
}

function clean_containers {
	get_cont_list
	for i in ${contlist}; do
		get_container_attributes ${i}
		if [ ${current} == 0 ] && [ ${inhist} == 0 ]; then
			btrfs subvolume delete -C ${lxcbase}/${containers}/${i}
		fi
	done
}

function relpath {
	python -c "import os.path; print os.path.join(os.path.relpath(os.path.dirname('$1'), os.path.dirname('$2')), os.path.basename('$1'))"
}


function add_container {
	check_cn
	if [ "${rootfs_fn}" == "" ]; then
		echo "Error: rootfs tar file not specified"
		print_cmd_help add
		exit 1
	fi
	if [ ! -f ${rootfs_fn} ]; then
		echo "Error: rootfs tar file ${rootfs_fn} not found"
		exit 1
	fi

	case "${1}" in
	new)
		if [ -L ${lxcbase}/${cn} ]; then
			echo "Error: container ${cn} already exists"
			exit 1
		fi
		;;
	upgrade)
		if [ ! -L ${lxcbase}/${cn} ]; then
			echo "Error: container ${cn} doesn't exist"
			exit 1
		fi
		;;
	*)
		echo "Error: unknown command ${1} to add_container"
		echo "This is an internal script error"
		exit 1
		;;
	esac

	if [ ${domain0} == 1 ]; then
		group="domain0"
		tty_num=1
	fi
	if [ "${group}" == "" ]; then
		group="parked"
	fi
	echo "Adding container" ${cn} "using rootfs" ${rootfs_fn}

	volname=`date +%s.%N`
	mkdir -p ${lxcbase}/${containers}/${cn}
	pathtocontainer=${lxcbase}/${containers}/${cn}/${volname}
	if [ ${btrfs} == 1 ]; then
		btrfs subvolume create ${pathtocontainer}
	else
		mkdir -p ${pathtocontainer}
	fi
	mkdir -p ${pathtocontainer}/rootfs

	# Re-use the merged_dir in essential or other containers

	container_tmppath=`get_tmppath_by_container $cn`
	container_mergedir=`cat ${CNRECORD}|awk -F ":" '{if ( $1=="'${cn}'" )print $3}'`

	# Adding ${cn} with merge option ${container_mergedir}
	for merge_entry in $(echo ${container_mergedir}|sed 's/;/\n/g'); do

		dir=`echo "$merge_entry"|awk -F "," '{print $1}'`
		target=`echo "$merge_entry"|sed 's/,/\n/g'|sed '1d'`

		# perform merge container ${TMPMNT}${dir} ${container_tmppath}${merged_dir}
		fstab_entry="overlay /var/lib/lxc/${cn}/rootfs${dir} overlay lowerdir="
		# Before merging, copy orignal outof rootfs
		cp -a ${container_tmppath}/rootfs${dir} ${container_tmppath}${dir}

		fstab_mark=0
		for target_entry in ${target}; do
			if [ ${target_entry} == "essential" ]; then
				lowerdir="${TMPMNT}${dir}"
				fstab_dir=${dir}
			else
				targetbase=`get_tmppath_by_container $target_entry`
				# Decide lowerdir from other container
				lowerdir="${targetbase}/rootfs${dir}"
				if [ ! -e $lowerdir ]; then
					lowerdir="${targetbase}${dir}"
				fi
				fstab_dir="/var/lib/lxc/${target_entry}/rootfs${dir}"
			fi
			if [ $fstab_mark == 0 ]; then
				fstab_mark=1
			else
				fstab_dir=":${fstab_dir}"
			fi

			# perform merge container ${lowerdir} ${container_tmppath}/rootfs${dir}
			${SBINDIR}/scanduplicate ${lowerdir} ${container_tmppath}/rootfs${dir}

			fstab_entry="${fstab_entry}${fstab_dir}"
		done;
		# After merge, rename the dir with dir_temp in rootfs
		if [ -d ${container_tmppath}/rootfs${dir} ]; then
			mv ${container_tmppath}/rootfs${dir} ${container_tmppath}/rootfs${dir}_temp
		else
			mkdir ${container_tmppath}/rootfs${dir}_temp
		fi

		# Add fstab entry in essential
		mkdir ${pathtocontainer}${dir}_over
		fstab_entry="${fstab_entry},upperdir=/var/lib/lxc/${cn}/rootfs${dir}_temp,workdir=/var/lib/lxc/${cn}${dir}_over 0       0"
		echo "${fstab_entry}">> ${TMPMNT}/etc/fstab
	done;

	# Finally copy $container_tmppath/rootfs/ to ${pathtocontainer}/rootfs
	cp -a $container_tmppath/rootfs/* ${pathtocontainer}/rootfs

	# Re-use networking configuration in deploy_new_container()
	if [ ${1} == "upgrade" ] && \
	   [ "$(grep -c '^lxc.network.link = br0$' ${lxcbase}/${cn}/config 2> /dev/null)" == "1" ]
	   then
		bridged_net=1
	fi

	echo "Deploying new container ${cn}"
	deploy_new_container
	# Final action, create the softlink to it
	# But first, if it's an upgrade, record the old one
	# in history for rollback purposes
	if [ ${1} == "upgrade" ]; then
		get_container_history
		mkdir -p ${pathtohistory}
		switch_container ${volname} addhist
	else
		ln -sTf $(relpath ${pathtocontainer} ${lxcbase}/${cn}) ${lxcbase}/${cn}
	fi
}

function get_container_history {
	pathtohistory=${lxcbase}/${meta}/${cn}/history
	if [ ! -d ${pathtohistory} ]; then
		histlinks=""
		hist_num=-1
		return 0
	fi
	histlinks=$( ls -r ${pathtohistory} )
	for k in ${histlinks}; do
		hist_num=${k}
		return 0
	done
	hist_num=-1
}

function snapshot_container {
	check_cn
	if [ ${btrfs} == 1 ]; then
		volname=`date +%s.%N`
		pathtocontainer=${lxcbase}/${containers}/${cn}/${volname}
		btrfs subvolume snapshot ${lxcbase}/${cn} ${pathtocontainer}
		#Insert snapshot into history making it latest rollback candidate
		get_container_history
		next=$(( ${hist_num} + 1 ))
		if [ ! -d ${pathtohistory} ]; then
			mkdir -p ${pathtohistory}
		fi
		ln -sfTL $(relpath ${pathtocontainer} ${pathtohistory}/${next}) ${pathtohistory}/${next}
	else
		echo "Container snapshot only supported on btrfs filesystem"
	fi
}

function switch_container {
	if [ ! -L ${lxcbase}/${cn} ]; then
		echo "Error: no link named ${cn} in ${lxcbase}"
		exit 1
	fi
	current=`ls -l ${lxcbase}/${cn}`
	current=${current##*/}
	if [ ${1} == ${current} ]; then
		# Already pointing to that container
		return 1
	fi
	check_active ${cn}
	if [ ${active} == 1 ]; then
		echo "Container ${cn} is active"
		if [ $force -eq 1 ]; then
			echo "Force enabled, stopping container"
			result="y"
		else
			echo -n "Stop, switch, then start it? (y/n) "
			read result
		fi
		if [ "${result}" == "y" ]; then
			stop_container
		else
			echo "Aborting"
			exit 1
		fi
	fi
	if [ "${2}" == "addhist" ] && [ ${removecont} == 0 ]; then
		next=$(( ${hist_num} + 1 ))
		echo "Adding history entry ${next}"
		ln -sfTL $(relpath ${lxcbase}/${cn} ${pathtohistory}/${next}) ${pathtohistory}/${next}
	fi
	pathtocontainer=${lxcbase}/${containers}/${cn}/${1}
	previous=$( readlink -f ${lxcbase}/${cn} )
	ln -sfTL $(relpath ${pathtocontainer} ${lxcbase}/${cn}) ${lxcbase}/${cn}
	if [ ${removecont} == 1 ]; then
		btrfs subvolume delete -C ${previous}
	fi
	if [ "${2}" == "delhist" ]; then
		hist_index=${hist_num}
		removecont=0
		echo "Removing history entry ${hist_index}"
		delete_history
	fi
	if [ ${active} == 1 ]; then
		echo -n "Starting container ${cn} ... "
		lxc-start -n ${cn} -d
		echo "done"
	fi
}

function stop_container {
	echo -n "Stopping container ${cn} .... "
	lxc-stop -n ${cn}
	echo "done"
}

function delete_container {
	check_cn
	check_active ${cn}
	if [ ${active} == 1 ]; then
		echo "Container ${cn} is active, will stop it then delete all instances."
		if [ $force -eq 1 ]; then
			echo "Force enabled, stopping container"
			result="y"
		else
			echo -n "Proceed (y/n)? "
			read result
		fi
		if [ "${result}" == "y" ]; then
			stop_container
		else
			echo "Aborting"
			exit 1
		fi
	else
		if [ $force -eq 0 ]; then
			echo "Will delete all instances of container ${cn}."
			echo -n "Proceed (y/n)? "
			read result
			if [ "${result}" != "y" ]; then
				echo "Aborting"
				exit 1
			fi
		fi
	fi
	echo "Removing containers"
	cd ${lxcbase}/${containers}/${cn}
	btrfs subvolume delete -C *
	cd - >/dev/null
	rm -rf ${lxcbase}/${containers}/${cn} >/dev/null 2>&1
	echo "Removing container history and other meta data"
	rm -rf ${lxcbase}/${meta}/${cn} >/dev/null 2>&1
	echo "Removing active link"
	rm ${lxcbase}/${cn} >/dev/null 2>&1
}

function rollback_container {
	check_cn
	if [ ${btrfs} == 0 ]; then
		echo "Error: can only rollback btrfs filesystem"
		exit 1
	fi
	if [ ! -L ${lxcbase}/${cn} ]; then
		echo "Error: no link named ${cn} in ${lxcbase}"
		exit 1
	fi
	current=`ls -l ${lxcbase}/${cn}`
	current=${current##*/}
	# Get rollback candidates sorted by most recent first
	get_container_history
	if [ ${hist_num} == -1 ]; then
		echo "No history for container ${cn} to rollback to"
		exit 1
	fi
	if [ ! -L ${pathtohistory}/${hist_num} ]; then
		echo "Top of history isn't a link."
		echo "Removing top of history.  Please try again for next one in list."
		rm ${pathtohistory}/${hist_num}
		exit 1
	fi
	rbcandidate=$( readlink -f ${pathtohistory}/${hist_num} )
	if [ ! -d ${rbcandidate} ]; then
		echo "Top of history link is broken."
		echo "Removing top of history.  Please try again for next one in list."
		rm ${pathtohistory}/${hist_num}
		exit 1
	fi
	contver=${rbcandidate##*/}
	if [ ${contver} == ${current} ]; then
		echo "Already on top of history for container ${cn}"
		echo "Perhaps you meant to upgrade instead of rollback?"
		echo "If you need to rollback then manually remove top of history."
		echo "Aborting."
		exit 1
	fi
	echo "Will rollback to: ${contver}" `date -d @${contver}`
	if [ $force -eq 1 ]; then
		result="y"
	else
		echo -n "Proceed? (y/n) "
		read result
	fi
	if [ "${result}" == "y" ]; then
		switch_container ${contver} delhist
		exit 0
	fi
	echo "No snapshot selected, aborting"
	exit 1
}

function list_history {
	check_cn
	get_container_history
	for k in ${histlinks}; do
		echo -n "${k} -> "
		fulldest=$( readlink ${pathtohistory}/${k} )
		dest=${fulldest##*/}
		echo -n "${dest} "
		echo `date -d @${dest}`
	done
}

function check_cn {
	if [ "${cn}" == "" ]; then
		echo "Error: container name not specified"
		echo "Use -n <name> or -0 for dom0"
		exit 1
	fi
}

function check_active {
	activeconts=$( lxc-ls --active )
	active=0
	for j in ${activeconts}; do
		if [ ${j} == ${1} ]; then
			active=1
			break
		fi
	done
}

function delete_history {
	check_cn
	if [ "${hist_index}" == "" ]; then
		echo "Error: history index not specified"
		print_cmd_help histdel
		exit 1
	fi
	get_container_history
	if [ ! -L ${pathtohistory}/${hist_index} ]; then
		echo "Error: history index ${hist_index} doesn't exist"
		exit 1
	fi
	if [ ${removecont} == 1 ]; then
		btrfs subvolume delete -C ${pathtohistory}/${hist_index}
	fi
	rm ${pathtohistory}/${hist_index}
}

# Mainline starts here
host_cross=false
lxcbase=${LXCBASE}
if [ -z "${lxcbase}" ]; then
    lxcbase=/var/lib/lxc
fi
bindmntbase=${BINDMNTBASE}
if [ -z "${bindmntbase}" ]; then
	bindmntbase="/opt/container"
fi
temp_lxcbase=$lxcbase
temp_bindmntbase=$bindmntbase
lxcbase_cross="/var/lib/lxc"
bindmntbase_cross="/opt/container"
containers=overc-containers
meta=overc-meta
domain0=0
autostart=0
peerstart=0
privileged=0
bridged_net=0
discoverable=0
removecont=0
tty_num=6
cmdhelp=0
force=0
ttyconsoledev="ttyS0"
havettyconsole=0
monitor_container="cube-desktop"

# See if we're using btrfs
mountpt=`grep ${lxcbase} /proc/mounts`
btrfs=0
if [ $? == 0 ]; then
	fstype=`echo $mountpt | cut -f 3 -d ' '`
	if [ "${fstype}" == "btrfs" ]; then
		btrfs=1
	else
		btrfs=0
	fi
fi

command=${1}
shift 1

while getopts "?FdhcapPb0n:m:f:g:i:rt:sS:v:" opt; do
	case $opt in
	0)
		domain0=1
		autostart=1
		cn="dom0"
		;;
	a)
		autostart=1
		;;
	c)	
		host_cross=true
		;;
	p)
		peerstart=1
		;;
	P)	privileged=1
		;;
	b)
		bridged_net=1
		;;
	d)
		discoverable=1
		;;
	f)
		rootfs_fn=$OPTARG
		;;
	g)
		group=$OPTARG
		;;
	h)
		cmdhelp=1
		;;
	i)
		hist_index=$OPTARG
		;;
	m)
		monitor_container=$OPTARG
		;;
	n)
		cn=$OPTARG
		;;
	r)
		removecont=1
		;;
	t)
		tty_num=$OPTARG
		if [ "${tty_num}" -eq "${tty_num}" ] 2>/dev/null; then
			continue
		else
			echo "Error: -t requires a number as argument"
			exit 1
		fi
		;;
	v)
		vty_num=$OPTARG
		if [ "${vty_num}" -ge "2" -a "${vty_num}" -le "6" ] 2>/dev/null; then
			continue
		else
			echo "Error: -v requires a number >= 2 and <= 6"
			exit 1
		fi
		;;
	F)
		force=1
		;;
	s)
		havettyconsole=1
		;;
	S)
		ttyconsoledev=$OPTARG
		;;
	?)
		print_help
		exit 0
		;;
	esac
done
if [ ${cmdhelp} == 1 ]; then
	print_cmd_help ${command}
	exit 0
fi
case "${command}" in
	add)
		add_container new
		;;
	delete)
		delete_container
		;;
	clean)
		clean_containers
		;;
	help)
		print_help
		exit 0
		;;
	histdel)
		delete_history
		exit 0
		;;
	histlist)
		list_history
		exit 0
		;;
	list)
		list_containers
		exit 0
		;;
	rollback)
		rollback_container
		exit 0
		;;
	snapshot)
		snapshot_container
		exit 0
		;;
	upgrade)
		add_container upgrade
		exit 0
		;;
	*)
		echo "Error: Unrecognized command ${command}"
		print_help
		;;
esac

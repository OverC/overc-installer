#!/bin/bash

#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License version 2 as
#  published by the Free Software Foundation.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#  See the GNU General Public License for more details.

if [ "$OVERC_DEBUG_SET_X_IF_SET" = 1 ] ; then
    set -x
fi

usage()
{
cat << EOF

 ${0##*/} <cmd> [options]

 options:
     -f/--force: force execute command without prompting
     -r/--reboot: force to reboot after command executed
     -o/--output <dir>: container output directory, defaults to /opt/container

 commands:

 ${0##*/} subvol <name>

    Create a btrfs subvol to insert a container into.  Tracking can
    be setup at a later point.

      <name>: name of the container subvolume

 ${0##*/} track <name>

    start to track a container, take a snapshot of that container and create
    a rollback history list if it does not already exist.

      <name>: name of the container to be tracked

 ${0##*/} untrack <name>

    stop tracking a container, remove all the snapshots of that container and
    delete the rollback history list if it exists.

      <name>: name of the container to be untracked

 ${0##*/} snapshot-create <name>

    take a snapshot of the current container version and place it on the top of
    the rollback history list.  If you take a snapshot before doing something
    risky or experimental to the current container, you can easily rollback.

      <name>: name of the container to be taken snapshot

 ${0##*/} snapshot-del <name> <snapshot>

    delete a given snapshot <snapshot> of container <name>, and remove it from
    rollback history list as well.

      <name>: name of the container

      <snapshot>: ID of the snapshot, can be displayed by snapshot-list.

 ${0##*/} snapshot-set <name> <snapshot>

    choose a given snapshot <snapshot> as the next to be rollback on for
    container <name>.

      <name>: name of the container

      <snapshot>: ID of the snapshot, can be displayed by snapshot-list.

 ${0##*/} snapshot-list <name>

    list all snapshots in the order as they are in rollback history list for
    container <name>.

      <name>: name of the container

 ${0##*/} snapshot-cleanup <name>

    cleanup snapshots not present in rollback history list anymore for
    container <name>.

      <name>: name of the container

 ${0##*/} snapshot-delall <name>

    delete all snapshots for container <name>, remove them from rollback history
    list as well.

      <name>: name of the container

 ${0##*/} check-update <name>

    check for available package upgrades

      <name>: name of the container

 ${0##*/} upgrade <name>

    do runtime upgrading in container if the container is running, you will be
    asked if you want to stop, switch, then restart it. Upgrade will not happen
    if the container is running, so if you don't confirm stopping it, the upgrade
    is aborted. On success, the old version is placed at the top of the history
    rollback list.

      <name>: name of the container to be upgraded

 ${0##*/} rollback <name>

    switch the current container version to be the one at the top of the
    history rollback list.  On success, the entry is removed from the history
    list, and the previous container version that was just switched out, is
    completely removed from the system as well.

      <name>: name of the container to do the rollback

EOF
}

# Text colors
BLD_NOTE="\\033[1;29m"    # Bright base color
BLD_WARNING="\\033[1;33m" # Bright yellow
BLD_ERROR="\\033[1;31m"   # Bright red
STD_NOTE="\\033[29m"      # Base color
STD_WARNING="\\033[33m"   # Yellow
STD_ERROR="\\033[31m"     # Red
RST="\\033[0m"            # Reset colors

#
# Helper functions
#
log_info() {
    echo -e ${BLD_NOTE}"[INFO]""${RST}: ${STD_NOTE}${@}${RST}"
}

log_warn() {
    echo -e ${BLD_WARNING}"[WARNING]""${RST}: ${STD_WARNING}${@}${RST}" >&2
}

log_error() {
    echo -e ${BLD_ERROR}"[ERROR]""${RST}: ${STD_ERROR}${@}${RST}" >&2
    return 1
}

is_container_available() {
    [ -n "${container_name}" ] || return 1

    ${SBINDIR}/cube-ctl list 2>/dev/null | grep -q "^${container_name}"
    return ${?}
}

is_container_running() {
    ${SBINDIR}/cube-ctl list | grep -q "^$container_name.*running"
    return ${?}
}

is_subvolume() {
    local subvolume=${1}

    btrfs subvolume show $subvolume >/dev/null 2>&1
    return ${?}
}

is_snapshot_available() {
    local snapshot=${1}

    is_subvolume ${snapshots_dir}/${container_name}/${snapshot}
    return ${?}
}

get_mount_fstype() {
    local dir=${1}
    local mount_point=$(stat --format '%m' ${dir})
    local mount_fstype=$(stat --file-system --format '%T' ${mount_point})

    echo ${mount_fstype}
}

insert_history_entry() {
    local entry_text=${1}
    local history_file=${snapshots_dir}/${container_name}/.container_history
    local tmpfile=$(mktemp)

    if [ -f "${history_file}" ]; then
        echo "${entry_text}" | cat - ${history_file} > ${tmpfile}
        mv ${tmpfile} ${history_file}
    else
        echo "${entry_text}" > ${history_file}
    fi
}

delete_history_entry() {
    local entry_text=${1}
    local history_file=${snapshots_dir}/${container_name}/.container_history

    sed -i "/${entry_text}/d" ${history_file} 2>/dev/null
}

btrfs_subvolume_snapshot() {
    local src=${1}
    local dest=${2}
    local dest_dir=$(dirname ${dest})

    # Ensure the parent directory of 'dest' exists, but the 'dest' itself
    # does not, or else the btrfs will create a snapshot inside 'dest'
    # instead of creating it.
    mkdir -p ${dest_dir}
    [ -e "$dest" ] && rm -rf $dest

    local requiring_size=$(du -s ${src} | awk '{print $1}')
    local available_size=$(df -a ${dest_dir} | sed -n '2p' | awk '{print $4}')

    if [ ${requiring_size} -lt $((${available_size}*1024)) ]; then
        btrfs subvolume snapshot ${src} ${dest}
    else
        echo "*******************************************************************"
        echo "  Warning: There isn't enough space left to snapshot conainer"
        echo "*******************************************************************"
        return 1
    fi
}

btrfs_subvolume_create() {
    local subvol=${1}

    btrfs subvolume create ${subvol}
}

btrfs_subvolume_delete() {
    local subvol_root=${1}
    local subvols=$(btrfs subvolume list -o ${subvol_root} | awk '{print $NF}' | sed "s#^.*/#${subvol_root}/#")

    # Delete all subvolumes recursively in reverse order
    for subvol in $(echo ${subvols} | tr ' ' '\n' | tac | tr '\n' ' '); do
        btrfs subvolume delete -C ${subvol}
    done
    btrfs subvolume delete -C ${subvol_root}
}

run_container_command() {
    local container=${1}
    local cmd="${2}"

    if [ ${container} = "dom0" ]; then
        ${cmd}
    else
        ${SBINDIR}/cube-ctl "${container}:${cmd}"
    fi
}

rpm_check_update() {
    local container=${1}

    run_container_command ${container} "dnf -q check-update --refresh"
}

rpm_upgrade() {
    local container=${1}

    # Prepare a tmpfs rpm database
    tempdir="/tmp/tmpd.${RANDOM}"
    run_container_command ${container} "mkdir -p ${tempdir}"
    run_container_command ${container} "cp -r /var/lib/rpm ${tempdir}"
    run_container_command ${container} "mount -t tmpfs tmpfs /var/lib/rpm"
    run_container_command ${container} "cp -r ${tempdir}/rpm /var/lib/"

    # Do upgrading
    run_container_command ${container} "dnf -y upgrade --refresh"
    local ret=${?}

    # Restore rpm database to persistent /var/lib
    run_container_command ${container} "cp -r /var/lib/rpm ${tempdir}"
    run_container_command ${container} "umount /var/lib/rpm"
    run_container_command ${container} "cp -r ${tempdir}/rpm /var/lib/"
    run_container_command ${container} "rm -rf ${tempdir}"
    run_container_command ${container} "sed -i /^CUBEUPDATE/d /etc/motd"

    return ${ret}
}

switch_to_snapshot() {
    local container=${1}
    local snapshot=${2}

    if [ ${container} = "dom0" ]; then
        # dom0 can not reload itself, so we create a file tag here, it
        # will be checked when essential boots up.
        echo ${snapshot} > ${snapshots_dir}/${container}/.need_reload
    else
        btrfs_subvolume_delete ${container_dir}/${container}
        btrfs_subvolume_snapshot ${snapshots_dir}/${container}/${snapshot} ${container_dir}/${container}
        btrfs_subvolume_delete ${snapshots_dir}/${container}/${snapshot}
        delete_history_entry ${snapshot}
    fi
}

#
# Command functions
#
subvol_container() {
    # Check if it's already been tracked.
    if btrfs subvolume show ${container_dir}/${container_name} >/dev/null 2>&1; then
        log_error "Container ${container_name} has already been tracked."
        return 1
    fi

    # Check if it's mounted on a btrfs partition.
    local fstype=$(get_mount_fstype "${container_dir}")
    if [ "${fstype}" != "btrfs" ]; then
        log_error "Tracking mode only supports btrfs, the current fstype of ${container_dir} is: ${fstype}"
        return 1
    fi

    mkdir -p ${container_dir}
    btrfs_subvolume_create ${container_dir}/${container_name}
}

track_container() {
    # Check if it's already been tracked.
    if btrfs subvolume show ${container_dir}/${container_name} >/dev/null 2>&1; then
        log_error "Container ${container_name} has already been tracked."
        return 1
    fi

    # Check if it's mounted on a btrfs partition.
    local fstype=$(get_mount_fstype "${container_dir}")
    if [ "${fstype}" != "btrfs" ]; then
        log_error "Tracking mode only supports btrfs, the current fstype of ${container_dir} is: ${fstype}"
        return 1
    fi

    # Create a temporary subvolume.
    local subvol_name=`date +%s.%N`
    mkdir -p ${snapshots_dir}/${container_name}
    btrfs_subvolume_create ${snapshots_dir}/${container_name}/${subvol_name}

    # Copy data to the temporary subvolume.
    tar --xattrs --xattrs-include='*' -cf - -C ${container_dir}/${container_name} -p . | \
        tar --xattrs --xattrs-include='*' -xf - -C ${snapshots_dir}/${container_name}/${subvol_name}

    # Track the container.(Create a snapshot)
    rm -rf ${container_dir}/${container_name}
    btrfs_subvolume_snapshot ${snapshots_dir}/${container_name}/${subvol_name} ${container_dir}/${container_name}

    # Delete the temporary subvolume.
    btrfs_subvolume_delete ${snapshots_dir}/${container_name}/${subvol_name}
}

untrack_container() {
    if ! is_container_available; then
        log_error "container is not available"
        return 1
    fi

    if is_container_running; then
        log_error "can not untrack a running container, please stop it first"
        return 1
    fi

    log_info "Untrack container will delete all snapshots"
    if [ -n "${forced}" ]; then
        answer="y"
    else
        echo -n "Proceed? (y/n) "
        read answer
    fi

    if [ "${answer}" = "y" ]; then
        delall_snapshots
        if is_subvolume ${container_dir}/${container_name} ; then
            btrfs_subvolume_delete ${container_dir}/${container_name} 2> /dev/null
        else
            rm -rf ${container_dir}/${container_name}
        fi
    else
        log_error "Aborting"
        return 1
    fi
}

rollback_container() {
    # Override global forced,reboot with parameter $1,$2
    [ -n "${1}" ] && local forced=${1}
    [ -n "${2}" ] && local reboot=${2}

    if ! is_container_available; then
        log_error "container is not available"
        return 1
    fi

    latest_snapshot=$(head -n1 ${snapshots_dir}/${container_name}/.container_history 2> /dev/null)
    if [ -z "${latest_snapshot}" ]; then
        log_error "No history for container to rollback to, please try track/snapshot-create firstly."
        return 1
    fi

    log_info "Will switch to: ${latest_snapshot}"
    if [ -n "${forced}" ]; then
        answer="y"
    else
        echo -n "Proceed? (y/n) "
        read answer
    fi

    if [ "${answer}" = "y" ]; then
        if is_container_running; then
            if [ -n "${forced}" ]; then
                log_info "Force enabled"
                answer="y"
            else
                echo -n "Stop, switch, then start it? (y/n) "
                read answer
            fi

            if [ "${answer}" = "y" ]; then
                if [ "${container_name}" != "dom0" ]; then
                    ${SBINDIR}/cube-ctl stop ${container_name}
                fi
            else
                log_error "Aborting"
                return 1
            fi
        fi

        switch_to_snapshot ${container_name} ${latest_snapshot}

        if [ "${container_name}" = "dom0" ]; then
            [ -n "${reboot}" ] && /sbin/reboot
        else
            cleanup_snapshots
            [ -n "${reboot}" ] && ${SBINDIR}/cube-ctl start ${container_name}
        fi
        log_info "Container had switched to ${latest_snapshot}"
    else
        log_error "No snapshot selected, aborting"
        return 1
    fi
}

check_update() {
    eval ${package_manager}_check_update "${container_name}"
    if [ $? = 100 ]; then
        log_info "Newer package upgrades available for ${container_name}"
        return 0
    else
        log_info "No newer package upgrades available for ${container_name}"
        return 1
    fi
}

upgrade_container() {
    log_info "Will upgrade container"
    if [ -n "${forced}" ]; then
        answer="y"
    else
        echo -n "Proceed? (y/n) "
        read answer
    fi

    if [ "${answer}" != "y" ]; then
        log_error "Aborting"
        return 1
    fi

    # No newer package upgrades should not be treated as a failure, return 0
    if ! check_update; then
        return 0
    fi

    create_snapshot || return 1
    if ! eval ${package_manager}_upgrade "${container_name}"; then
        log_error "Upgrade container with ${package_manager} failed, rollback to the latest"
        rollback_container "true" ""
        return 1
    fi

    # dom0 can not cleanup itself at present, delay the cleanup in the next boot up.
    if [ "${container_name}" = "dom0" ]; then
        ln -sf /lib/systemd/system/overc_cleanup.service \
            ${container_dir}/${container_name}/rootfs/etc/systemd/system/multi-user.target.wants/overc_cleanup.service
    fi

    if is_container_running; then
        if [ "${container_name}" = "dom0" ]; then
            [ -n "${reboot}" ] && /sbin/reboot
        elif [ -n "${reboot}" ]; then
            ${SBINDIR}/cube-ctl stop ${container_name}
            ${SBINDIR}/cube-ctl start ${container_name}
        fi
    fi
    log_info "container had upgraded to the latest version"
}

create_snapshot() {
    if ! is_container_available; then
        log_error "container ${container_name} is not available"
        return 1
    fi

    fstype=$(get_mount_fstype "${container_dir}")
    if [ "${fstype}" = "btrfs" ]; then
        volname=`date +%s.%N`
        src=${container_dir}/${container_name}
        dest=${snapshots_dir}/${container_name}/${volname}
        btrfs_subvolume_snapshot ${src} ${dest} || return 1
        insert_history_entry ${volname}
    else
        log_error "Container snapshot only supported on btrfs filesystem"
        return 1
    fi
    log_info "Created snapshot ${volname} as the latest to rollback"
}

delete_snapshot() {
    local snapshot=${1}
    local snapshot_dir=${snapshots_dir}/${container_name}/${snapshot}

    if ! is_container_available; then
        log_error "container is not available" >&2
        return 1
    fi

    if ! is_snapshot_available ${snapshot}; then
        log_error "snapshot is not available"
        return 1
    fi

    btrfs_subvolume_delete ${snapshot_dir}
    delete_history_entry ${snapshot}
    log_info "${snapshot} have been deleted from rollback history list"
}

set_snapshot() {
    local snapshot=${1}

    if ! is_container_available; then
        log_error "container is not available"
        return 1
    fi

    if ! is_snapshot_available ${snapshot}; then
        log_error "snapshot is not available"
        return 1
    fi

    delete_history_entry ${snapshot}
    insert_history_entry ${snapshot}
    log_info "snapshot set to ${snapshot} for next rollback"
}

list_snapshots() {
    if ! is_container_available; then
        log_error "container is not available"
        return 1
    fi

    awk '{print ++num, " ", $1;}' ${snapshots_dir}/${container_name}/.container_history 2>/dev/null
}

cleanup_snapshots() {
    if ! is_container_available; then
        log_error "container is not available"
        return 1
    fi

    for snapshot in $(cd ${snapshots_dir}/${container_name} 2>/dev/null && ls); do
        if ! grep -q ${snapshot} ${snapshots_dir}/${container_name}/.container_history 2>/dev/null; then
            btrfs_subvolume_delete ${snapshots_dir}/${container_name}/${snapshot}
        fi
    done
    log_info "The unused snapshots have been cleaned up"
}

delall_snapshots() {
    cleanup_snapshots

    for snapshot in $(cat ${snapshots_dir}/${container_name}/.container_history 2>/dev/null); do
        delete_snapshot ${snapshot}
    done
    log_info "All snapshots have been deleted"
}


#
# Main script starts from here
#
if [ ${#} -lt 1 ]; then
    usage
    exit
fi

# SBINDIR can be set in installer at build time
if [ -z "${SBINDIR}" ]; then
    SBINDIR="/usr/sbin"
fi

forced=
reboot=
source_name=
container_name=
container_dir=/opt/container
snapshots_dir=/opt/container/.snapshots
package_manager=rpm

while [ ${#} -gt 0 ]; do
    case "${1}" in
        -f|--force)
            forced=1
            ;;
        -r|--reboot)
            reboot=1
            ;;
        -o|--output)
            container_dir=$(realpath ${2} 2>/dev/null)
            snapshots_dir=${container_dir}/.snapshots
            shift
            ;;
        *)
            subcmd=${1}
            container_name=${2}
            if [[ -n "${3}" && "${3}" != -* ]]; then
                source_name=${3}
                shift 2
            else
                shift
            fi
            ;;
    esac
    shift
done

case "${subcmd}" in
    subvol)
        subvol_container
        ;;
    track)
        track_container
        ;;
    untrack)
        untrack_container
        ;;
    snapshot-create)
        create_snapshot
        ;;
    snapshot-del)
        delete_snapshot ${source_name}
        ;;
    snapshot-set)
        set_snapshot ${source_name}
        ;;
    snapshot-list)
        list_snapshots
        ;;
    snapshot-cleanup)
        cleanup_snapshots
        ;;
    snapshot-delall)
        delall_snapshots
        ;;
    check-update)
        check_update
        ;;
    upgrade)
        upgrade_container
        ;;
    rollback)
        rollback_container
        ;;
    *)
        usage
        exit 1
esac

exit $?

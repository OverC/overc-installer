#!/bin/bash
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License version 2 as
#  published by the Free Software Foundation.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#  See the GNU General Public License for more details.
export PATH="$PATH:/bin"

if [ "$CUBE_DEBUG_SET_X_IF_SET" = 1 ] ; then
    set -x
fi

BASEDIR=$(dirname $BASH_SOURCE)
# support files
INSTALLER_FILES_DIR="${BASEDIR}/../files"
# sbin files (typically this creator)
SBINDIR="${BASEDIR}/../sbin"
# installers that will go on the usb stick, and install to the HD
INSTALLERS_DIR="${BASEDIR}/../installers"
LIBDIR="${BASEDIR}/../lib"

: ${FUNCTIONS_FILE="$BASEDIR/functions.sh"}

## Load functions file
if ! [ -e $FUNCTIONS_FILE ]
then
	echo "ERROR: Could not find function definitions (${FUNCTIONS_FILE})"
	exit 1
fi
source $FUNCTIONS_FILE

usage()
{
cat << EOF

  cubeit [--config <config script>] [--target-config <config script>] [--force] --artifacts [<artifacts dir>] [--ima-sign] <target>

  cubeit is capable of creating a "cube capable" installer + payload, or image.

  Default configuration is: ~/.overc/config-usb.sh, or the command line
  specified configuration script.

  See the builtin example config-usb.sh.sample for what must be in a config script.

  options:

     --config <script>: use the specified configuration script found in ~/.overc/
     -i or --interactive: use the interactive configuration interface
     --target-config <script>: use the specified configuration script found in ~/.overc/
                               when running the target installer
     --force: force overwrite any output files or images
     --artifacts: directory where the binary inputs for image generation are found.
		  The configuration script indicates what specific images will be used
     --ima-sign: perform IMA signing for the rootfs and container images

  cubeit is capable of creating images, or installers + payloads, or simply payloads
  with the value of <target> indicating which type of image to create.

     <target>: The output of the script.

	  - /dev/<x>: A physical USB device, or a network block device. This generates
		      a bootable USB installer that is capable of installing OverC onto
		      a device.

		      If a bootable installer image is required, specific a network block
		      device (that has been properly configured to point to a image file)
		      and this application will generate an image that can be later copied
		      to a USB device (versus being directly written).

	  - <path>/<foo>.img: Generate a bootable image. In this mode the installer is
			      directly run to generate an image that is capable of being
			      written or flashed to a device and directly booted .. or
                              directly booted via qemu.

	  - <path_to_dir>: Generate an install media directory. This mode produces a
			   directory with the installer and installer data required to
			   complete an install. This is similar to the bootable USB
			   installer without the bootable part, allowing the result to
			   be copied to an existing bootable USB device or accessed via
			   NFS to complete an install on a running system.

  examples:

      # network block device
      $ cubeit --artifacts `pwd` /dev/nbd0

      # usb drive as sdc
      $ cubeit --artifacts `pwd` /dev/sdc

      # network block device
      $ cubeit --artifacts `pwd` --config /tmp/my_usb_config.sh /dev/nbd0

      # image
      $ cubeit --force --config config-live.sh --artifacts `pwd` /tmp/overc.img

      # installer + installer data
      $ cubeit --artifacts `pwd` /tmp/installer_dir

EOF
}

if [ -z "$1" ]; then
    usage
    exit
fi

NBD=
LOOP=t
INSTALLER_IMAGE=t
DO_IMA_SIGN=${DO_IMA_SIGN:-0}
while [ $# -gt 0 ]; do
    case "$1" in
    --config)
            CONFIG_FILES="${CONFIG_FILES} $2"
	    shift
            ;;
    --target-config)
	    TARGET_CONFIG_FILE="$2"
	    shift
	    ;;
    --artifacts)
            ARTIFACTS_DIR="$2"
	    shift
            ;;
    --disk-size)
	    TARGET_DISK_SIZE="$2"
	    shift
	    ;;
	--interactive|-i)
		# Interactive config mode
		INTERACTIVE_MODE=1
		for app in blockdev dialog; do
			verify_utility $app || { echo >&2 "ERROR: $app is not available"; exit 1; }
		done
		;;
    --installer)
	    # create an installer, not a final image (this is the default)
            INSTALLER_IMAGE=t
            ;;
    -o)     outpath=$2
            shift
            ;;
    --nbd)
	    NBD=t
	    LOOP=
	    ;;
    --ima-sign)
	    DO_IMA_SIGN=1
	    ;;
    --force)
	    FORCE=t
            ;;
    -v) verbose=t
            ;;
    --partition_layout)
            FDISK_PARTITION_LAYOUT_INPUT="$2"
            shift
            ;;
         *) break
            ;;
    esac
    shift
done

# configuration for this script
if [ -z "${CONFIG_DIRS}" ] ; then
    CONFIG_DIRS="${BASEDIR}/../config $HOME/.overc/"
fi
export CONFIG_DIRS

if [ -n "$ARTIFACTS_DIR" ]; then
    if [ ! -d "$ARTIFACTS_DIR" ]; then
	echo "[INFO]: Artifacts dir $ARTIFACTS_DIR does not exist"
    fi
fi
export ARTIFACTS_DIR

# determine the location of key store
if [ -z "$KEYS_DIR" -o ! -d "$KEYS_DIR" ]; then
    SAMPLE_KEYS_DIR="$ARTIFACTS_DIR/sample-keys"
    USER_KEYS_DIR="$ARTIFACTS_DIR/user-keys"

    if [ -d "$USER_KEYS_DIR" ]; then
        KEYS_DIR="$USER_KEYS_DIR"
    else
        KEYS_DIR="$SAMPLE_KEYS_DIR"
    fi
fi

# check if the filesystem can support xattr.
check_fs_for_ima()
{
    local tmpfile="`mktemp test_XXXX`"
    local res=`setfattr -x security.ima "$tmpfile" 2>&1 | grep -q 'Operation not supported$'`

    rm -f "$tmpfile"

    return ! $res
}

if [ $DO_IMA_SIGN -eq 1 ]; then
    if [ ! -s "$KEYS_DIR/ima_keys/ima_privkey.pem" ]; then
        debugmsg ${DEBUG_CRIT} "[ERROR] Unable to run IMA signing due to the invalid signing key"
        exit 1
    elif ! check_fs_for_ima; then
        debugmsg ${DEBUG_CRIT} "[ERROR]: Current file system does not support to set xattr"
        exit 1
    fi
fi

ima_sign()
{
    evmctl ima_sign --hashalgo sha256 --rsa \
        --key "$KEYS_DIR/ima_keys/ima_privkey.pem" \
        -r -t f "$1" && {
        return 0
    } || {
        debugmsg ${DEBUG_INFO} "[ERROR]: IMA signing occurs with error for $1."
        exit 1
    } &
    pidspinner "$!" "1"
}

repack_image_for_ima()
{
    local tarball="$1"
    local tarball_dst=$2
    local repack_dir=`mktemp -d repack_tarball.XXXXXX`
    local repack_image="`basename ${tarball}`"

    debugmsg ${DEBUG_INFO} "[INFO]: Preparing to repack image ${repack_image} for IMA signing ..."

    repack_dir="`pwd`/${repack_dir}"

    extract_tarball "${tarball}" "${repack_dir}"
    [ $? -ne 0 ] && {
        rm -rf "${repack_dir}"
        return 1
    }

    debugmsg ${DEBUG_INFO} "[INFO]: The image ${repack_image} extracted"

    ima_sign "$repack_dir"
    [ $? -ne 0 ] && {
        rm -rf "${repack_dir}"
        return 1
    }

    debugmsg ${DEBUG_INFO} "[INFO]: IMA signing complete for ${repack_image}"

    pack_tarball "${repack_dir}" "`pwd`/${repack_image}"
    [ $? -ne 0 ] && {
        rm -rf "${repack_dir}"
        return 1
    }

    rm -rf "${repack_dir}"

    eval "${tarball_dst}=${repack_image}"

    debugmsg ${DEBUG_INFO} "[INFO]: ${tarball} is repacked as ${repack_image}"

    return 0
}

######################################################################
# Define some debug output variables

# Debug Levels - fixed values
DEBUG_SILENT=0
DEBUG_CRIT=1
DEBUG_WARN=2
DEBUG_INFO=4
DEBUG_VERBOSE=7

# Set your default debug level
: ${DEBUG_DEFAULT:=${DEBUG_INFO}}

# Dynamic debug level
DEBUG_LEVEL=${DEBUG_DEFAULT}

: ${TRACE:=0}

# command line parameters can be:
#   <target> (device, directory or file)
target=$1
if [ -z "$target" ]; then
    debugmsg ${DEBUG_CRIT} "Please specify a target"
    false
    assert $?
else
    if [ -e "/sys/block/$(basename "$target")" ]; then
	TARGET_TYPE=block
    elif [ -d $target ]; then
	TARGET_TYPE=dir
    elif [ -e $target ]; then
	TARGET_TYPE=image
    else
	TARGET_TYPE=image
    fi
fi

if [ "$TARGET_TYPE" = "block" ]; then
    USBSTORAGE_DEVICE=/sys/block/$(basename "$target")
fi

## Load configuration file(s)
colon_separated_config_dirs=`echo ${CONFIG_DIRS} | sed 's/ /:/g'`
for config in ${CONFIG_FILES}; do
    config_to_source="${config}"

    # check to see if the config exists. If it doesn't search the config paths
    if ! [ -e "${config}" ]; then
	for d in ${CONFIG_DIRS}; do
	    if [ -e "${d}/${config}" ]; then
		config_to_source="${d}/${config}"
	    fi
	done

	if [ -z "${config_to_source}" ]; then
	    echo "ERROR: Could not find configuration file (${config_to_soure})."
	    echo "Try using an absolute path or the file must be in one of ($(echo ${CONFIG_DIRS} | tr ' ' ','))."
	    exit 1
	fi
    fi
    export PATH="$PATH:${colon_separated_config_dirs}:$(dirname ${config_to_source})"
    source `basename ${config_to_source}`
done

# config sanity check
if [ "${#ROOTFS_LABEL}" -gt 16 ]; then
	echo "The length of the ROOTFS_LABEL is greater than 16, will be stripped to: ${ROOTFS_LABEL:0:16}"
	read -p "Do you wish to continue? [y/n] " -n 1
	echo
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		ROOTFS_LABEL=${ROOTFS_LABEL:0:16}
	else
		exit 1
	fi
fi

# Check if interactive mode will be used
if [ -z ${CONFIG_FILES} ] || ([ -n "$INTERACTIVE_MODE" ] && [ "$INTERACTIVE_MODE" -eq 1 ]); then
	if [ -z "$ARTIFACTS_DIR" ]; then
		debugmsg ${DEBUG_CRIT} -e "Artifacts dir not found, please use --artifacts to specify."
		exit 1
	fi
	debugmsg ${DEBUG_INFO} "Entering interactive mode..."
	SAVE_CONFIG_FOLDER="saved_config"
	recursive_mkdir ${SAVE_CONFIG_FOLDER}
	tmpconf="${SAVE_CONFIG_FOLDER}/config.sh"
	echo "" > ${tmpconf}
	promptsdir=${LIBDIR}/prompts
	for f in `ls $promptsdir`; do
		source $promptsdir/$f
		basename=${f%.*}
		${basename:5}
		if [ $? -ne 0 ]; then
			debugmsg ${DEBUG_CRIT} -e "\n\n\nFailed to generate config using interactive mode, run again or specify a config via --config option."
			exit 1
		fi
	done

	debugmsg ${DEBUG_INFO} -e "\n\n\nUser config saved. Installation will continue."
	debugmsg ${DEBUG_INFO} "You can specify --config ${SAVE_CONFIG_FOLDER}/config.sh option in your later installations to use the exact same configurations."
	CONFIG_FILES="`pwd`/${SAVE_CONFIG_FOLDER}/config.sh"
	TARGET_CONFIG_FILE=$CONFIG_FILES
	source $CONFIG_FILES
fi

if ! [ -n "$DISTRIBUTION" ]; then
    DISTRIBUTION="OverC"
fi

# Find the grub configuration
for d in ${CONFIG_DIRS} ${INSTALLER_FILES_DIR}; do
    if [ -e "${d}/${INSTALL_GRUBUSBCFG}" ] &&
       [ -z "${INSTALL_GRUBCFG}" ]; then
	INSTALL_GRUBCFG=${d}/${INSTALL_GRUBUSBCFG}
    fi
done
if [ "$TARGET_TYPE" != "dir" ] && [ -z "${INSTALL_GRUBUSBCFG}" ]; then
        echo "ERROR: usb grub configuration ${INSTALL_GRUBUSBCFG} not found"
        exit 1
fi

# Locations on the USB bootable drive fr installer configuration
if [ -z "${INSTALLER_TARGET_DIR}" ]; then
    INSTALLER_TARGET_DIR="/opt/installer"
fi
INSTALLER_TARGET_SBIN_DIR="${INSTALLER_TARGET_DIR}/sbin"
INSTALLER_TARGET_LIB_DIR="${INSTALLER_TARGET_DIR}/lib"
INSTALLER_TARGET_CONFIG_DIR="${INSTALLER_TARGET_DIR}/config"
INSTALLER_TARGET_FILES_DIR="${INSTALLER_TARGET_DIR}/files"
INSTALLER_TARGET_IMAGES_DIR="${INSTALLER_TARGET_DIR}/images"

# find board specific function files, and make them locally available
for d in ${CONFIG_DIRS} $BASEDIR; do
    if [ -e "${d}/functions-${BOARD_NAME}.sh" ]; then
	# make sure to copy it
	FUNCTIONS_TO_COPY="${FUNCTIONS_TO_COPY} ${d}/functions-${BOARD_NAME}.sh"
	# And source it for potential use here
	source "${d}/functions-${BOARD_NAME}.sh"
    fi
done

## Set up trap handler
trap_with_name "trap_handler" EXIT SIGINT

case $TARGET_TYPE in
    block)
	if [ -n ${USBSTORAGE_DEVICE} ]; then
	    dev=$(validate_usbstorage "${USBSTORAGE_DEVICE}")
	    if [ -z "$dev" ]; then
		# is it NBD ?
		echo "${USBSTORAGE_DEVICE}" | grep -q "nbd"
		if [ $? -eq 0 ]; then
		    dev=`basename "${USBSTORAGE_DEVICE}"`
		fi
	    fi
	    INSTALLER_BANNER=${USBSTORAGE_BANNER}
	    INSTALLER_INTRODUCTION=${USBSTORAGE_INTRODUCTION}
	else
	    debugmsg ${DEBUG_CRIT} "No storage device provided"
	    false
	    assert $?
	fi

	if [ -z $dev ]; then
	    debugmsg ${DEBUG_CRIT} "ERROR: Failed to detect device"
	    false
	    assert $?
	fi
	;;
    dir)
	if [ -d "$target" ]; then
		if [ -n "$(ls -A $target)" -a -z "$FORCE" ]; then
			debugmsg ${DEBUG_CRIT} "Directory  ($target) already exists and it is not empty. Remove it and restart"
			false
			assert $?
		fi
		rm -r $target
	else
		debugmsg ${DEBUG_CRIT} "The destination is not a directory."
		false
		assert $?
	fi
	mkdir -p $target
	;;
    image)
	if [ -e $target ]; then
	    if [ -z "$FORCE" ]; then
		debugmsg ${DEBUG_CRIT} "Image ($target) already exists. Remove it and restart"
		false
		assert $?
	    fi
	    rm -f $target
	fi
	;;
esac

install_summary()
{
    package_count=0
    if [ -d "${PACKAGES_DIR}" ]; then
        package_count=`find ${PACKAGES_DIR} -name '*.rpm' | wc -l`
    fi

    echo ""
    echo "Install Summary:"
    echo "----------------"
    echo ""
    echo "   target device:"
    echo "             ${USBSTORAGE_DEVICE}"
    echo "   kernel:"
    echo "             ${INSTALL_KERNEL}"
    echo "   images: "
    for i in ${HDINSTALL_ROOTFS}; do
        echo "             `basename ${i}`"
    done
    echo "   packages: "
    echo "             $package_count packages available from: ${PACKAGES_DIR}"
    echo "   containers: "
    for i in ${HDINSTALL_CONTAINERS}; do
        echo "             `basename ${i}`"
    done
    echo ""

}

#
# Copy the installer 'static' parts, that is scripts, dirs,
# files, libs...
#
# Configs are not static and so are dealt with as content
# and copied later, see copy_installer_data().
#
copy_installer()
{
	local destdir="$1"

	debugmsg ${DEBUG_INFO} "Copying installer to install media"
	recursive_mkdir ${destdir}${INSTALLER_TARGET_LIB_DIR}
	if [ $? -ne 0 ]; then
	    return 1
	fi

	cp -r ${LIBDIR}/* ${destdir}${INSTALLER_TARGET_LIB_DIR}
	if [ $? -ne 0 ]; then
		debugmsg ${DEBUG_CRIT} "ERROR: Failed to copy lib files"
		return 1
	fi

	recursive_mkdir ${destdir}${INSTALLER_TARGET_SBIN_DIR}
	if [ $? -ne 0 ]; then
	    return 1
	fi

	cp -r ${SBINDIR}/* ${destdir}${INSTALLER_TARGET_SBIN_DIR}
	if [ $? -ne 0 ]; then
		debugmsg ${DEBUG_CRIT} "ERROR: Failed to copy sbin files"
		return 1
	fi

	# put the installers in with the sbin files
	cp -r ${INSTALLERS_DIR}/* ${destdir}${INSTALLER_TARGET_SBIN_DIR}
	if [ $? -ne 0 ]; then
		debugmsg ${DEBUG_CRIT} "ERROR: Failed to copy installer files"
		return 1
	fi

	# and any extended functions/callbacks
	if [ -n "${FUNCTIONS_TO_COPY}" ]; then
	    debugmsg ${DEBUG_INFO} "Copying target installer functions: ${FUNCTIONS_TO_COPY}"
OLDIFS=$IFS
IFS='
'
	    for f in ${FUNCTIONS_TO_COPY}; do
		# remove any leading spaces
		a=`echo $f | sed 's/^ *//g'`
		if [ -e "${a}" ]; then
		    cp -f "${a}" ${destdir}${INSTALLER_TARGET_SBIN_DIR}
		fi
	    done
IFS=$OLDIFS
	fi

	## Copy files from local workspace to USB drive
	recursive_mkdir ${destdir}${INSTALLER_TARGET_FILES_DIR}
	if [ $? -ne 0 ]; then
	    return 1
	fi

	## Copy the common files from ${INSTALLER_FILES_DIR} to ${INSTALLER_TARGET_FILES_DIR}
	## Here only chvt.service, other files maybe added in the future
	COMMON_FILES="chvt.service"
	for f in ${COMMON_FILES}; do
		if [ -e ${INSTALLER_FILES_DIR}/${f} ]; then
			cp ${INSTALLER_FILES_DIR}/${f} ${destdir}${INSTALLER_TARGET_FILES_DIR}/
		fi
	done

	recursive_mkdir ${destdir}${INSTALLER_TARGET_IMAGES_DIR}
	if [ $? -ne 0 ]; then
	    return 1
	fi

	return 0
}

#
# Copies installer data (container images, dynamic configs...)
#
copy_installer_data()
{
	local destdir="$1"
	local img=""

	debugmsg ${DEBUG_INFO} "Copying installer data to install media"
	if [ -n "${HDINSTALL_ROOTFS}" ]; then
	    ## Copy the Linux rootfs tarball(s) to USB drive
            for i in ${HDINSTALL_ROOTFS}; do
		if [ $DO_IMA_SIGN -eq 0 ]; then
		    img="${i}"
		else
		    repack_image_for_ima "${i}" img
		    if [ $? -ne 0 ]; then
			debugmsg ${DEBUG_CRIT} "ERROR: Failed to repack rootfs image $i for IMA signing"
			return 1
		    fi
		fi

	        cp "${img}" "${destdir}${INSTALLER_TARGET_IMAGES_DIR}"
	        if [ $? -ne 0 ]; then
		    debugmsg ${DEBUG_CRIT} "ERROR: Failed to copy hard drive install root filesystem"
		    return 1
	        fi
            done
	fi

	# deal with any packages
	if [ -n "${PACKAGES_DIR}" ]; then
	    debugmsg ${DEBUG_INFO} "Copying RPMs to install media"
	    recursive_mkdir ${destdir}/${INSTALLER_TARGET_IMAGES_DIR}/packages
	    cp -r ${PACKAGES_DIR} ${destdir}/${INSTALLER_TARGET_IMAGES_DIR}/packages
	fi

	# containers
	# make a container map, based on the HDINSTALL_CONTAINERS
	if [ -n "${HDINSTALL_CONTAINERS}" ]; then
	    debugmsg ${DEBUG_INFO} "Copying Containers to install media"

	    recursive_mkdir ${destdir}${INSTALLER_TARGET_IMAGES_DIR}/containers
	    recursive_mkdir ${destdir}${INSTALLER_TARGET_CONFIG_DIR}

	    # drop any properties and copy the containers to the installer
	    for c in `strip_properties ${HDINSTALL_CONTAINERS}`; do
		if [ $DO_IMA_SIGN -eq 0 ]; then
		    img="${c}"
		else
		    repack_image_for_ima "${c}" img
		    if [ $? -ne 0 ]; then
			debugmsg ${DEBUG_CRIT} "ERROR: Failed to repack container image $c for IMA signing"
			return 1
		    fi
		fi

		cp "${img}" "${destdir}/${INSTALLER_TARGET_IMAGES_DIR}/containers"
	    done

	    # create a configuration that can be read by the cubeit-installer
	    if [ -v TARGET_CONFIG_FILE -a -n "$TARGET_CONFIG_FILE" ]; then
		cat $TARGET_CONFIG_FILE |
			sed "s|\${ARTIFACTS_DIR}|${INSTALLER_TARGET_IMAGES_DIR}/containers|g" > \
			${destdir}${INSTALLER_TARGET_CONFIG_DIR}/config-installer.sh

		# copy all files, which might be used by target configuration
		if [ -e "${LOCAL_POST_FUNCTION_DEFS}" ] ; then
		    debugmsg ${DEBUG_INFO} "Copying files from $(dirname $LOCAL_POST_FUNCTION_DEFS)."
		    cp $(dirname $LOCAL_POST_FUNCTION_DEFS)/* ${destdir}${INSTALLER_TARGET_CONFIG_DIR}
		fi
	    else
		echo "HDINSTALL_CONTAINERS=\"\\" > ${destdir}${INSTALLER_TARGET_CONFIG_DIR}/config-installer.sh
		for c in ${HDINSTALL_CONTAINERS}; do
		    echo -n "${INSTALLER_TARGET_IMAGES_DIR}/containers/" >> ${destdir}${INSTALLER_TARGET_CONFIG_DIR}/config-installer.sh
		    echo -n `basename ${c}` >> ${destdir}${INSTALLER_TARGET_CONFIG_DIR}/config-installer.sh
		    echo " \\" >> ${destdir}${INSTALLER_TARGET_CONFIG_DIR}/config-installer.sh
		done
		echo "\"" >> ${destdir}${INSTALLER_TARGET_CONFIG_DIR}/config-installer.sh
	    fi
	    echo "DISTRIBUTION=\"$DISTRIBUTION\"" >>${destdir}${INSTALLER_TARGET_CONFIG_DIR}/config-installer.sh
	    echo "CONFIRM_INSTALL=$CONFIRM_INSTALL" >>${destdir}${INSTALLER_TARGET_CONFIG_DIR}/config-installer.sh
	fi

	if [ -n "${HD_MODULES}" ]; then
	    ## Copy the kernel modules tarball to USB drive
	    cp ${HD_MODULES} ${destdir}${INSTALLER_TARGET_FILES_DIR}
	    if [ $? -ne 0 ]
	    then
		debugmsg ${DEBUG_CRIT} "ERROR: Failed to copy kernel modules"
		return 1
	    fi
	fi

	if [ -e "$INSTALL_SMARTCONFIG" ]; then
		debugmsg ${DEBUG_INFO} "Install smart config $INSTALL_SMARTCONFIG"
		cp $INSTALL_SMARTCONFIG ${destdir}/${INSTALLER_TARGET_IMAGES_DIR}/config.smart
	fi

	return 0
}

custom_install_rules()
{
	local mnt_boot="$1"
	local mnt_rootfs="$2"

	## repack initramfs as required
	local initramfs_source=${INSTALL_INITRAMFS}
	if [ -n "${INITRAMFS_EXTRAS}" ]; then
	    debugmsg ${DEBUG_INFO} "Repacking initramfs with extras"
	    sudo rm -rf /tmp/tt/
	    sudo mkdir -p /tmp/tt
	    cd /tmp/tt
	    sudo sh -c "zcat ${INSTALL_INITRAMFS} |cpio -id"
	    for helper in ${INITRAMFS_EXTRAS}; do
		if [ -e	"${helper}" ]; then
		    debugmsg ${DEBUG_INFO} "adding $helper to the initramfs"
		    cp "${helper}" .
		else
		    debugmsg ${DEBUG_INFO} "WARNING: could not find helper $helper"
		fi
	    done
	    find . | cpio -o -H newc > /tmp/new-initramfs
	    initramfs_source="/tmp/new-initramfs"
	fi

	## Copy kernel and files to filesystem 
	## Note: we always make sure to install the initramfs as
	##       INSTALL_INITRAMFS, since other routines read that global variable,
	##       and align things like grub to that name.
	debugmsg ${DEBUG_INFO} "Copying kernel image"
	install_kernel "${INSTALL_KERNEL}" "${mnt_boot}" "${initramfs_source}" "`basename ${INSTALL_INITRAMFS}`"
	if [ $? -ne 0 ]; then
	    return 1
	fi

	if [ -n "${INSTALL_ROOTFS}" ]; then
	    debugmsg ${DEBUG_INFO} "Extracting root filesystem (${INSTALL_ROOTFS})"
	    extract_tarball "${INSTALL_ROOTFS}" "${mnt_rootfs}"
	    if [ $? -ne 0 ]; then
		return 1
	    fi
	else
	    debugmsg ${DEBUG_INFO} "No rootfs specified, not extracting"
	fi
	
	if [ -n "${INSTALL_MODULES}" ]; then
	    debugmsg ${DEBUG_INFO} "Extracting kernel modules "
	    extract_tarball "${INSTALL_MODULES}" "${mnt_rootfs}"
	    if [ $? -ne 0 ]; then
		return 1
	    fi
	else
	    debugmsg ${DEBUG_INFO} "No kernel modules specified, not extracting"
	fi

	# copy installer 'static' content
	copy_installer "${mnt_rootfs}"
	if [ $? -ne 0 ]; then
	    return 1
	fi

	if ${X86_ARCH}; then
		## Copy the hard drive GRUB configuration
		for d in ${CONFIG_DIRS} ${INSTALLER_FILES_DIR}; do
			if [ -e ${d}/${INSTALL_GRUBHDCFG} ] &&
			[ ! -e ${mnt_rootfs}${INSTALLER_TARGET_FILES_DIR}/${INSTALL_GRUBHDCFG} ]; then
				debugmsg ${DEBUG_CRIT} "INFO: found grub hd configuration ${d}/${INSTALL_GRUBHDCFG}"
				cp ${d}/${INSTALL_GRUBHDCFG} ${mnt_rootfs}${INSTALLER_TARGET_FILES_DIR}/${INSTALL_GRUBHDCFG}
	    		fi
		done

		## Copy the efi grub
		if [ -e "${INSTALL_EFIBOOT}" ]; then
			debugmsg ${DEBUG_CRIT} "INFO: copy efi boot grub"
			cp "${INSTALL_EFIBOOT}" ${mnt_rootfs}${INSTALLER_TARGET_IMAGES_DIR}
		fi

		## Install the EFI grub from essential rootfs when enabled secure boot
		if [ -f ${mnt_rootfs}/boot/efi/EFI/BOOT/boot*.efi ]; then
			debugmsg ${DEBUG_INFO} "[INFO]: installing secure boot EFI artifacts"
			#backup the original grub.cfg file if it exists and then reback it
			if [ -f ${mnt_boot}/EFI/BOOT/grub.cfg ]; then
				mv ${mnt_boot}/EFI/BOOT/grub.cfg ${mnt_boot}/EFI/BOOT/.grub.cfg
			fi
			cp -a ${mnt_rootfs}/boot/efi/EFI  ${mnt_boot}/
			if [ -f ${mnt_boot}/EFI/BOOT/.grub.cfg ]; then
				mv ${mnt_boot}/EFI/BOOT/.grub.cfg ${mnt_boot}/EFI/BOOT/grub.cfg
			fi
		fi 
	fi
	if ! ${X86_ARCH}; then
		if [ -e "${INSTALL_BOOTLOADER}" -a "X${BOARD_NAME}" != "X" ]; then
			debugmsg ${DEBUG_CRIT} "INFO: copy bootloader"
			cp "${INSTALL_BOOTLOADER}" ${mnt_rootfs}${INSTALLER_TARGET_IMAGES_DIR}/${BOARD_NAME}_boot.bin
		fi
		if [ -e "${INSTALL_DTB}" ]; then
			debugmsg ${DEBUG_CRIT} "INFO: copy dtb"
			cp "${INSTALL_DTB}" ${mnt_rootfs}${INSTALLER_TARGET_IMAGES_DIR}/dtb
		else
			debugmsg ${DEBUG_CRIT} "ERROR: Didn't find dtb ${INSTALL_DTB}"
			return 1
		fi
	fi

	## And the installer kernel + initramfs
	cp "${INSTALL_KERNEL}" "${INSTALL_INITRAMFS}" ${mnt_rootfs}${INSTALLER_TARGET_IMAGES_DIR}

	## ----------------------------------------------------------
	## Things that will be installed to the hard drive below here
	## ----------------------------------------------------------
	copy_installer_data "${mnt_rootfs}"
	if [ $? -ne 0 ]; then
	    return 1
	fi

	return 0
}

# Install installer files into a destination directory
# The installation can be gzipped and transfered to the target for deployment.
# It is usefull in the context when board is booted over nfs or from other media.
custom_install_rules_dir()
{
	local destdir="$1"

	# copy installer 'static' content
	copy_installer "${destdir}"
	if [ $? -ne 0 ]; then
	    return 1
	fi

	## And initramfs
	cp "${INSTALL_INITRAMFS}" ${destdir}${INSTALLER_TARGET_IMAGES_DIR}
	if [ $? -ne 0 ]; then
	    debugmsg ${DEBUG_CRIT} "ERROR: Failed to copy '${INSTALL_INITRAMFS}' to '${destdir}${INSTALLER_TARGET_IMAGES_DIR}'"
	    return 1
	fi

	## ----------------------------------------------------------
	## Things that will be installed to the hard drive below here
	## ----------------------------------------------------------
	copy_installer_data "${destdir}"
	if [ $? -ne 0 ]; then
	    return 1
	fi

	return 0
}

# In a desktop environment, disable the automounter to automatically
# mount the inserted media and Nautilus automatically pops up a
# window to open a folder during installing to avoid umount failures
# It's only for gnome currently.
# TODO: fix for other desktop environment, e.g. KDE, XFCE
RUN_LOGNAME="sudo -u $(logname)"
MEDIA_HANDLING="org.gnome.desktop.media-handling"
MEDIA_HANDLING_PATH="/org/gnome/desktop/media-handling"
HAVE_GSETTING=1
HAVE_DCONF=1
DESKTOP_SESSION=""
verify_utility gsettings && HAVE_GSETTING=0
verify_utility dconf && HAVE_DCONF=0

ps -ef|grep gnome-session|grep -v grep >/dev/null 2>&1
[ $? -eq 0 ] && DESKTOP_SESSION="gnome"

disable_automounter()
{
	if [ "${DESKTOP_SESSION}" = "gnome" ]; then
		if [ ${HAVE_GSETTING} -eq 0 ]; then
		        debugmsg ${DEBUG_INFO} "[INFO]: Disable automounter during install with gsetting."
			AUTOMOUNT_BACK=`${RUN_LOGNAME} gsettings get ${MEDIA_HANDLING} automount`
			AUTOMOUNT_OPEN_BACK=`${RUN_LOGNAME} gsettings get ${MEDIA_HANDLING} automount-open`
			${RUN_LOGNAME} gsettings set ${MEDIA_HANDLING} automount "false" 2>/dev/null
			${RUN_LOGNAME} gsettings set ${MEDIA_HANDLING} automount-open "false" 2>/dev/null
		elif [ ${HAVE_DCONF} -eq 0 ]; then
		        debugmsg ${DEBUG_INFO} "[INFO]: Disable automounter during install with dconf."
			AUTOMOUNT_BACK=`${RUN_LOGNAME} dconf read ${MEDIA_HANDLING_PATH}/automount`
			AUTOMOUNT_OPEN_BACK=`${RUN_LOGNAME} dconf read ${MEDIA_HANDLING_PATH}/automount-open`
			${RUN_LOGNAME} dconf write ${MEDIA_HANDLING_PATH}/automount "false" 2>/dev/null
			${RUN_LOGNAME} dconf write ${MEDIA_HANDLING_PATH}/automount-open "false" 2>/dev/null
		fi
	fi
}

restore_automounter()
{
	if [ "${DESKTOP_SESSION}" = "gnome" ]; then
		if [ ${HAVE_GSETTING} -eq 0 ]; then
		        debugmsg ${DEBUG_INFO} "[INFO]: Restore previous automounter settings with gsetting."
			${RUN_LOGNAME} gsettings set ${MEDIA_HANDLING} automount "${AUTOMOUNT_BACK}" 2>/dev/null
			${RUN_LOGNAME} gsettings set ${MEDIA_HANDLING} automount-open "${AUTOMOUNT_OPEN_BACK}" 2>/dev/null
		elif [ ${HAVE_DCONF} -eq 0 ]; then
		        debugmsg ${DEBUG_INFO} "[INFO]: Restore previous automounter settings with gconf."
			${RUN_LOGNAME} dconf write ${MEDIA_HANDLING_PATH}/automount "${AUTOMOUNT_BACK}" 2>/dev/null
			${RUN_LOGNAME} dconf write ${MEDIA_HANDLING_PATH}/automount-open "${AUTOMOUNT_OPEN_BACK}" 2>/dev/null
		fi
	fi
}

disable_automounter

case $TARGET_TYPE in
    block)
	installer_main "$dev"
	;;
    dir)
	installer_dir "$target"
	;;
    image)
	export TARGET_TYPE=$TARGET_TYPE

	size=7G
	if [ -n "${TARGET_DISK_SIZE}" ]; then
	    size=${TARGET_DISK_SIZE}
	fi

	for app in qemu-img partprobe qemu-nbd btrfs; do
	    verify_utility $app || { echo >&2 "ERROR: $app is not available"; exit 1; }
	done

	verify_root_user ||  { echo >&2 "ERROR: cubeit must be run as root"; exit 1; }

	qemu-img create $target $size

	if [ -n "$NBD" ]; then
	    device=
	    for i in `ls /dev/nbd*`; do
		qemu-nbd --nocache -c $i $target >/dev/null 2>&1
		if [ $? -eq 0 ]; then
		    echo "using nbd device $i"
		    device=$i
		    break
		fi
	    done

	    if [ -z "$device" ]; then
		debugmsg ${DEBUG_CRIT} "No valid or free nbd device found"
		false
		assert $?
	    fi
	else
	    device=`losetup -f --show $target`
	    if [ -z "$device" ]; then
		debugmsg ${DEBUG_CRIT} "[ERROR]: No free loop devices, try nbd ?"
		false
		assert $?
	    fi
	fi

	if [ -z "${TARGET_CONFIG_FILE}" ]; then
	    if [ -n "${CONFIG_FILES}" ]; then
		TARGET_CONFIG_FILE="${CONFIG_FILES}"
	    else
		TARGET_CONFIG_FILE="config-live.sh"
	    fi
	fi

	if [ -n "${FDISK_PARTITION_LAYOUT_INPUT}" ];then
	    debugmsg ${DEBUG_INFO} "$INSTALLERS_DIR/cubeit ${INSTALL_ROOTFS} \
		    --config ${TARGET_CONFIG_FILE} $device --partition_layout ${FDISK_PARTITION_LAYOUT_INPUT}"
	    $INSTALLERS_DIR/cubeit-installer -b --artifacts ${ARTIFACTS_DIR} \
		    --config ${TARGET_CONFIG_FILE} --partition_layout ${FDISK_PARTITION_LAYOUT_INPUT} ${INSTALL_ROOTFS} $device
	else
	    debugmsg ${DEBUG_INFO} "$INSTALLERS_DIR/cubeit ${INSTALL_ROOTFS} --config ${TARGET_CONFIG_FILE} $device"
	    $INSTALLERS_DIR/cubeit-installer -b --artifacts ${ARTIFACTS_DIR} \
		    --config ${TARGET_CONFIG_FILE} ${INSTALL_ROOTFS} $device
	fi

	if [ -n "$NBD" ]; then
	    qemu-nbd -d $device
	else
	    losetup -d $device
	fi
	# Chown the image file to the owner of the directory
	# it was written to
	if [ -e $target ] ; then
		d=$(dirname $target)
		chown $(stat -c "%u" $d) $target
	fi

	;;
esac

restore_automounter

exit 0

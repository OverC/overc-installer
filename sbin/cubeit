#!/bin/bash
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License version 2 as
#  published by the Free Software Foundation.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#  See the GNU General Public License for more details.
export PATH="$PATH:/bin"

BASEDIR=$(dirname $BASH_SOURCE)

if [ "$CUBE_DEBUG_SET_X_IF_SET" = 1 ] ; then
    set -x
fi

: ${FUNCTIONS_FILE="$BASEDIR/functions.sh"}

usage()
{
cat << EOF

  cubeit [--config <config script>] [--target-config <config script>] [--force] --artifacts [<artifacts dir>] <target>

  cubeit is capable of creating a "cube capable" installer + payload, or image.

  Default configuration is: ~/.overc/config-usb.sh, or the command line
  specified configuration script.

  See the builtin example config-usb.sh.sample for what must be in a config script.

  options:

     --config <script>: use the specified configuration script found in ~/.overc/
     --target-config <script>: use the specified configuration script found in ~/.overc/
                               when running the target installer
     --force: force overwrite any output files or images
     --artifacts: directory where the binary inputs for image generation are found.
		  The configuration script indicates what specific images will be used

  cubeit is capable of creating images, or installers + payloads, with the value of
  <target> indicating which type of image to create.

     <target>: The output of the script.

	  - /dev/<x>: A physical USB device, or a network block device. This generates
		      a bootable USB installer that is capable of installing OverC onto
		      a device.

		      If a bootable installer image is required, specific a network block
		      device (that has been properly configured to point to a image file)
		      and this application will generate an image that can be later copied
		      to a USB device (versus being directly written).

	  - <path>/<foo>.img: Generate a bootable image. In this mode the installer is
			      directly run to generate an image that is capable of being
			      written or flashed to a device and directly booted .. or
                              directly booted via qemu.

  examples:

      # network block device
      $ cubeit --artifacts `pwd` /dev/nbd0

      # usb drive as sdc
      $ cubeit --artifacts `pwd` /dev/sdc

      # network block device
      $ cubeit --artifacts `pwd` --config /tmp/my_usb_config.sh /dev/nbd0

      # image
      $ cubeit --force --config config-live.sh --artifacts `pwd` /tmp/overc.img

EOF
}

if [ -z "$1" ]; then
    usage
    exit
fi

NBD=
LOOP=t
INSTALLER_IMAGE=t
while [ $# -gt 0 ]; do
    case "$1" in
    --config)
            CONFIG_FILES="${CONFIG_FILES} $2"
	    shift
            ;;
    --target-config)
	    TARGET_CONFIG_FILE="$2"
	    shift
	    ;;
    --artifacts)
            ARTIFACTS_DIR="$2"
	    shift
            ;;
    --disk-size)
	    TARGET_DISK_SIZE="$2"
	    shift
	    ;;
    --installer)
	    # create an installer, not a final image (this is the default)
            INSTALLER_IMAGE=t
            ;;
    -o)     outpath=$2
            shift
            ;;
    --nbd)
	    NBD=t
	    LOOP=
	    ;;
    --force)
	    FORCE=t
            ;;
    -v) verbose=t
            ;;
    --partition_layout)
            FDISK_PARTITION_LAYOUT_INPUT="$2"
            shift
            ;;
         *) break
            ;;
    esac
    shift
done

# support files
INSTALLER_FILES_DIR="${BASEDIR}/../files"
# sbin files (typically this creator)
SBINDIR="${BASEDIR}/../sbin"
# installers that will go on the usb stick, and install to the HD
INSTALLERS_DIR="${BASEDIR}/../installers"
# configuration for this script
if [ -z "${CONFIG_DIRS}" ] ; then
    CONFIG_DIRS="${BASEDIR}/../config $HOME/.overc/"
fi
export CONFIG_DIRS

if [ -n "$ARTIFACTS_DIR" ]; then
    if [ ! -d "$ARTIFACTS_DIR" ]; then
	echo "[INFO]: Artifacts dir $ARTIFACTS_DIR does not exist"
    fi
fi
export ARTIFACTS_DIR

# command line parameters can be:
#   <target> (device, directory or file)
target=$1
if [ -z "$target" ]; then
    debugmsg ${DEBUG_CRIT} "Please specify a target"
    false
    assert $?
else
    if [ -e "/sys/block/$(basename "$target")" ]; then
	TARGET_TYPE=block
    elif [ -d $target ]; then
	TARGET_TYPE=dir
    elif [ -e $target ]; then
	TARGET_TYPE=image
    else
	TARGET_TYPE=image
    fi
fi

if [ "$TARGET_TYPE" = "block" ]; then
    USBSTORAGE_DEVICE=/sys/block/$(basename "$target")
fi


## Load functions file
if ! [ -e $FUNCTIONS_FILE ]
then
	echo "ERROR: Could not find function definitions (${FUNCTIONS_FILE})"
	exit 1
fi
source $FUNCTIONS_FILE

## Load configuration file(s)
if [ -z ${CONFIG_FILES} ]; then
    echo "ERROR: no configuration was provided via --config"
    exit 1
fi

source_conffiles

if ! [ -n "$DISTRIBUTION" ]; then
    DISTRIBUTION="OverC"
fi

# Find the grub configuration
for d in ${CONFIG_DIRS} ${INSTALLER_FILES_DIR}; do
    if [ -e "${d}/${INSTALL_GRUBUSBCFG}" ] &&
       [ -z "${INSTALL_GRUBCFG}" ]; then
	INSTALL_GRUBCFG=${d}/${INSTALL_GRUBUSBCFG}
    fi
done
if [ -z "${INSTALL_GRUBUSBCFG}" ]; then
    echo "ERROR: usb grub configuration ${INSTALL_GRUBUSBCFG} not found"
    exit 1
fi

# Locations on the USB bootable drive fr installer configuration
if [ -z "${INSTALLER_TARGET_DIR}" ]; then
    INSTALLER_TARGET_DIR="/opt/installer"
fi
INSTALLER_TARGET_SBIN_DIR="${INSTALLER_TARGET_DIR}/sbin"
INSTALLER_TARGET_CONFIG_DIR="${INSTALLER_TARGET_DIR}/config"
INSTALLER_TARGET_FILES_DIR="${INSTALLER_TARGET_DIR}/files"
INSTALLER_TARGET_IMAGES_DIR="${INSTALLER_TARGET_DIR}/images"

# find board specific function files, and make them locally available
for d in ${CONFIG_DIRS} $BASEDIR; do
    if [ -e "${d}/functions-${BOARD_NAME}.sh" ]; then
	# make sure to copy it
	FUNCTIONS_TO_COPY="${FUNCTIONS_TO_COPY} ${d}/functions-${BOARD_NAME}.sh"
	# And source it for potential use here
	source "${d}/functions-${BOARD_NAME}.sh"
    fi
done

## Set up trap handler

trap_cmd='trap_handler $?'
trap "${trap_cmd}" EXIT
trap "clean_up \"Action cancelled by user.\"" SIGINT

case $TARGET_TYPE in
    block)
	if [ -n ${USBSTORAGE_DEVICE} ]; then
	    dev=$(validate_usbstorage "${USBSTORAGE_DEVICE}")
	    if [ -z "$dev" ]; then
		# is it NBD ?
		echo "${USBSTORAGE_DEVICE}" | grep -q "nbd"
		if [ $? -eq 0 ]; then
		    dev=`basename "${USBSTORAGE_DEVICE}"`
		fi
	    fi
	    INSTALLER_BANNER=${USBSTORAGE_BANNER}
	    INSTALLER_INTRODUCTION=${USBSTORAGE_INTRODUCTION}
	else
	    debugmsg ${DEBUG_CRIT} "No storage device provided"
	    false
	    assert $?
	fi

	if [ -z $dev ]; then
	    debugmsg ${DEBUG_CRIT} "ERROR: Failed to detect device"
	    false
	    assert $?
	fi
	;;
    dir)
	# TODO: not currently implemented
	;;
    image)
	if [ -e $target ]; then
	    if [ -z "$FORCE" ]; then
		debugmsg ${DEBUG_CRIT} "Image ($target) already exists. Remove it and restart"
		false
		assert $?
	    fi
	    rm -f $target
	fi
	;;
esac

install_summary()
{
    package_count=0
    if [ -d "${PACKAGES_DIR}" ]; then
        package_count=`find ${PACKAGES_DIR} -name '*.rpm' | wc -l`
    fi

    echo ""
    echo "Install Summary:"
    echo "----------------"
    echo ""
    echo "   target device:"
    echo "             ${USBSTORAGE_DEVICE}"
    echo "   kernel:"
    echo "             ${INSTALL_KERNEL}"
    echo "   images: "
    for i in ${HDINSTALL_ROOTFS}; do
        echo "             `basename ${i}`"
    done
    echo "   packages: "
    echo "             $package_count packages available from: ${PACKAGES_DIR}"
    echo "   containers: "
    for i in ${HDINSTALL_CONTAINERS}; do
        echo "             `basename ${i}`"
    done
    echo ""

}

custom_install_rules()
{
	local mnt_boot="$1"
	local mnt_rootfs="$2"

	## repack initramfs as required
	local initramfs_source=${INSTALL_INITRAMFS}
	if [ -n "${INITRAMFS_EXTRAS}" ]; then
	    debugmsg ${DEBUG_INFO} "Repacking initramfs with extras"
	    sudo rm -rf /tmp/tt/
	    sudo mkdir -p /tmp/tt
	    cd /tmp/tt
	    sudo sh -c "zcat ${INSTALL_INITRAMFS} |cpio -id"
	    for helper in ${INITRAMFS_EXTRAS}; do
		if [ -e	"${helper}" ]; then
		    debugmsg ${DEBUG_INFO} "adding $helper to the initramfs"
		    cp "${helper}" .
		else
		    debugmsg ${DEBUG_INFO} "WARNING: could not find helper $helper"
		fi
	    done
	    find . | cpio -o -H newc > /tmp/new-initramfs
	    initramfs_source="/tmp/new-initramfs"
	fi

	## Copy kernel and files to filesystem 
	## Note: we always make sure to install the initramfs as
	##       INSTALL_INITRAMFS, since other routines read that global variable,
	##       and align things like grub to that name.
	debugmsg ${DEBUG_INFO} "Copying kernel image"
	install_kernel "${INSTALL_KERNEL}" "${mnt_boot}" "${initramfs_source}" "`basename ${INSTALL_INITRAMFS}`"
	assert_return $?

	if [ -n "${INSTALL_ROOTFS}" ]; then
	    debugmsg ${DEBUG_INFO} "Extracting root filesystem (${INSTALL_ROOTFS})"
	    extract_tarball "${INSTALL_ROOTFS}" "${mnt_rootfs}"
	    assert_return $?
	else
	    debugmsg ${DEBUG_INFO} "No rootfs specified, not extracting"
	fi
	
	if [ -n "${INSTALL_MODULES}" ]; then
	    debugmsg ${DEBUG_INFO} "Extracting kernel modules "
	    extract_tarball "${INSTALL_MODULES}" "${mnt_rootfs}"
	    assert_return $?
	else
	    debugmsg ${DEBUG_INFO} "No kernel modules specified, not extracting"
	fi

	recursive_mkdir ${mnt_rootfs}${INSTALLER_TARGET_SBIN_DIR}
	assert_return $?

	cp ${SBINDIR}/* ${mnt_rootfs}${INSTALLER_TARGET_SBIN_DIR}
	if [ $? -ne 0 ]; then
		debugmsg ${DEBUG_CRIT} "ERROR: Failed to copy sbin files"
		return 1
	fi

	# put the installers in with the sbin files
	cp ${INSTALLERS_DIR}/* ${mnt_rootfs}${INSTALLER_TARGET_SBIN_DIR}
	if [ $? -ne 0 ]; then
		debugmsg ${DEBUG_CRIT} "ERROR: Failed to copy installer files"
		return 1
	fi

	# and any extended functions/callbacks
	if [ -n "${FUNCTIONS_TO_COPY}" ]; then
	    debugmsg ${DEBUG_INFO} "Copying target installer functions: ${FUNCTIONS_TO_COPY}"
OLDIFS=$IFS
IFS='
'
	    for f in ${FUNCTIONS_TO_COPY}; do
		# remove any leading spaces
		a=`echo $f | sed 's/^ *//g'`
		if [ -e "${a}" ]; then
		    cp -f "${a}" ${mnt_rootfs}${INSTALLER_TARGET_SBIN_DIR}
		fi
	    done
IFS=$OLDIFS
	fi

	## Copy files from local workspace to USB drive
	recursive_mkdir ${mnt_rootfs}${INSTALLER_TARGET_FILES_DIR}
	assert_return $?

	recursive_mkdir ${mnt_rootfs}${INSTALLER_TARGET_IMAGES_DIR}
	assert_return $?

	if ${X86_ARCH}; then
		## Copy the hard drive GRUB configuration
		for d in ${CONFIG_DIRS} ${INSTALLER_FILES_DIR}; do
			if [ -e ${d}/${INSTALL_GRUBHDCFG} ] &&
			[ ! -e ${mnt_rootfs}${INSTALLER_TARGET_FILES_DIR}/${INSTALL_GRUBHDCFG} ]; then
				debugmsg ${DEBUG_CRIT} "INFO: found grub hd configuration ${d}/${INSTALL_GRUBHDCFG}"
				cp ${d}/${INSTALL_GRUBHDCFG} ${mnt_rootfs}${INSTALLER_TARGET_FILES_DIR}/${INSTALL_GRUBHDCFG}
	    		fi
		done

		## Copy the efi grub
		if [ -e "${INSTALL_EFIBOOT}" ]; then
			debugmsg ${DEBUG_CRIT} "INFO: copy efi boot grub"
			cp "${INSTALL_EFIBOOT}" ${mnt_rootfs}${INSTALLER_TARGET_IMAGES_DIR}
		fi
	fi
	if ! ${X86_ARCH}; then
		if [ -e "${INSTALL_BOOTLOADER}" -a "X${BOARD_NAME}" != "X" ]; then
			debugmsg ${DEBUG_CRIT} "INFO: copy bootloader"
			cp "${INSTALL_BOOTLOADER}" ${mnt_rootfs}${INSTALLER_TARGET_IMAGES_DIR}/${BOARD_NAME}_boot.bin
		fi
		if [ -e "${INSTALL_DTB}" ]; then
			debugmsg ${DEBUG_CRIT} "INFO: copy dtb"
			cp "${INSTALL_DTB}" ${mnt_rootfs}${INSTALLER_TARGET_IMAGES_DIR}/dtb
		else
			debugmsg ${DEBUG_CRIT} "ERROR: Didn't find dtb ${INSTALL_DTB}"
			return 1
		fi
	fi

	## And the installer kernel + initramfs
	cp "${INSTALL_KERNEL}" "${INSTALL_INITRAMFS}" ${mnt_rootfs}${INSTALLER_TARGET_IMAGES_DIR}

	## ----------------------------------------------------------
	## Things that will be installed to the hard drive below here
	## ----------------------------------------------------------
	if [ -n "${HDINSTALL_ROOTFS}" ]; then
	    ## Copy the Linux rootfs tarball(s) to USB drive
            for i in ${HDINSTALL_ROOTFS}; do               
	        cp ${i} ${mnt_rootfs}${INSTALLER_TARGET_IMAGES_DIR}
	        if [ $? -ne 0 ]; then
		    debugmsg ${DEBUG_CRIT} "ERROR: Failed to copy hard drive install root filesystem"
		    return 1
	        fi
            done
	fi

	# deal with any packages
	if [ -n "${PACKAGES_DIR}" ]; then
	    debugmsg ${DEBUG_INFO} "Copying RPMs to install media"
	    recursive_mkdir ${mnt_rootfs}/${INSTALLER_TARGET_IMAGES_DIR}/packages
	    cp -r ${PACKAGES_DIR} ${mnt_rootfs}/${INSTALLER_TARGET_IMAGES_DIR}/packages
	fi

	# containers
	# make a container map, based on the HDINSTALL_CONTAINERS
	if [ -n "${HDINSTALL_CONTAINERS}" ]; then
	    debugmsg ${DEBUG_INFO} "Copying Containers to install media"

	    recursive_mkdir ${mnt_rootfs}${INSTALLER_TARGET_IMAGES_DIR}/containers
	    recursive_mkdir ${mnt_rootfs}${INSTALLER_TARGET_CONFIG_DIR}

	    # drop any properties and copy the containers to the installer
	    for c in `strip_properties ${HDINSTALL_CONTAINERS}`; do
		cp ${c} ${mnt_rootfs}/${INSTALLER_TARGET_IMAGES_DIR}/containers/
	    done

	    # create a configuration that can be read by the cubeit-installer
	    if [ -v TARGET_CONFIG_FILE -a -n "$TARGET_CONFIG_FILE" ]; then
		cat $TARGET_CONFIG_FILE |
			sed "s|\${ARTIFACTS_DIR}|${INSTALLER_TARGET_IMAGES_DIR}/containers|g" > \
			${mnt_rootfs}${INSTALLER_TARGET_CONFIG_DIR}/config-installer.sh
	    else
		echo "HDINSTALL_CONTAINERS=\"\\" > ${mnt_rootfs}${INSTALLER_TARGET_CONFIG_DIR}/config-installer.sh
		for c in ${HDINSTALL_CONTAINERS}; do
		    echo -n "${INSTALLER_TARGET_IMAGES_DIR}/containers/" >> ${mnt_rootfs}${INSTALLER_TARGET_CONFIG_DIR}/config-installer.sh
		    echo -n `basename ${c}` >> ${mnt_rootfs}${INSTALLER_TARGET_CONFIG_DIR}/config-installer.sh
		    echo " \\" >> ${mnt_rootfs}${INSTALLER_TARGET_CONFIG_DIR}/config-installer.sh
		done
		echo "\"" >> ${mnt_rootfs}${INSTALLER_TARGET_CONFIG_DIR}/config-installer.sh
	    fi
	    echo "DISTRIBUTION=\"$DISTRIBUTION\"" >>${mnt_rootfs}${INSTALLER_TARGET_CONFIG_DIR}/config-installer.sh
	fi

	if [ -n "${HD_MODULES}" ]; then
	    ## Copy the kernel modules tarball to USB drive
	    cp ${HD_MODULES} ${mnt_rootfs}${INSTALLER_TARGET_FILES_DIR}
	    if [ $? -ne 0 ]
	    then
		debugmsg ${DEBUG_CRIT} "ERROR: Failed to copy kernel modules"
		return 1
	    fi
	fi

	# puppet modules etc.
	if [ -v INSTALL_PUPPET_DIR ]; then
	    if [ -d ${INSTALLER_FILES_DIR}/${INSTALL_PUPPET_DIR} ]; then
		debugmsg ${DEBUG_INFO} "Copying Puppet files to install media"
		recursive_mkdir ${mnt_rootfs}${INSTALLER_TARGET_FILES_DIR}/puppet
		cp -r ${INSTALLER_FILES_DIR}/${INSTALL_PUPPET_DIR}/* ${mnt_rootfs}${INSTALLER_TARGET_FILES_DIR}/puppet/
	    else
		debugmsg ${DEBUG_INFO} "INSTALL_PUPPET_DIR set but directory doesn't exist."
	    fi
	fi

	if [ -e "$INSTALL_SMARTCONFIG" ]; then
		debugmsg ${DEBUG_INFO} "Install smart config $INSTALL_SMARTCONFIG"
		cp $INSTALL_SMARTCONFIG ${mnt_rootfs}/${INSTALLER_TARGET_IMAGES_DIR}/config.smart
	fi
	
	return 0
}

# In a desktop environment, disable the automounter to automatically
# mount the inserted media and Nautilus automatically pops up a
# window to open a folder during installing to avoid umount failures
# It's only for gnome currently.
# TODO: fix for other desktop environment, e.g. KDE, XFCE
RUN_LOGNAME="sudo -u $(logname)"
MEDIA_HANDLING="org.gnome.desktop.media-handling"
MEDIA_HANDLING_PATH="/org/gnome/desktop/media-handling"
HAVE_GSETTING=1
HAVE_DCONF=1
DESKTOP_SESSION=""
verify_utility gsettings && HAVE_GSETTING=0
verify_utility dconf && HAVE_DCONF=0

ps -ef|grep gnome-session|grep -v grep >/dev/null 2>&1
[ $? -eq 0 ] && DESKTOP_SESSION="gnome"

disable_automounter()
{
	if [ "${DESKTOP_SESSION}" = "gnome" ]; then
		if [ ${HAVE_GSETTING} -eq 0 ]; then
		        debugmsg ${DEBUG_INFO} "[INFO]: Disable automounter during install with gsetting."
			AUTOMOUNT_BACK=`${RUN_LOGNAME} gsettings get ${MEDIA_HANDLING} automount`
			AUTOMOUNT_OPEN_BACK=`${RUN_LOGNAME} gsettings get ${MEDIA_HANDLING} automount-open`
			${RUN_LOGNAME} gsettings set ${MEDIA_HANDLING} automount "false" 2>/dev/null
			${RUN_LOGNAME} gsettings set ${MEDIA_HANDLING} automount-open "false" 2>/dev/null
		elif [ ${HAVE_DCONF} -eq 0 ]; then
		        debugmsg ${DEBUG_INFO} "[INFO]: Disable automounter during install with dconf."
			AUTOMOUNT_BACK=`${RUN_LOGNAME} dconf read ${MEDIA_HANDLING_PATH}/automount`
			AUTOMOUNT_OPEN_BACK=`${RUN_LOGNAME} dconf read ${MEDIA_HANDLING_PATH}/automount-open`
			${RUN_LOGNAME} dconf write ${MEDIA_HANDLING_PATH}/automount "false" 2>/dev/null
			${RUN_LOGNAME} dconf write ${MEDIA_HANDLING_PATH}/automount-open "false" 2>/dev/null
		fi
	fi
}

restore_automounter()
{
	if [ "${DESKTOP_SESSION}" = "gnome" ]; then
		if [ ${HAVE_GSETTING} -eq 0 ]; then
		        debugmsg ${DEBUG_INFO} "[INFO]: Restore previous automounter settings with gsetting."
			${RUN_LOGNAME} gsettings set ${MEDIA_HANDLING} automount "${AUTOMOUNT_BACK}" 2>/dev/null
			${RUN_LOGNAME} gsettings set ${MEDIA_HANDLING} automount-open "${AUTOMOUNT_OPEN_BACK}" 2>/dev/null
		elif [ ${HAVE_DCONF} -eq 0 ]; then
		        debugmsg ${DEBUG_INFO} "[INFO]: Restore previous automounter settings with gconf."
			${RUN_LOGNAME} dconf write ${MEDIA_HANDLING_PATH}/automount "${AUTOMOUNT_BACK}" 2>/dev/null
			${RUN_LOGNAME} dconf write ${MEDIA_HANDLING_PATH}/automount-open "${AUTOMOUNT_OPEN_BACK}" 2>/dev/null
		fi
	fi
}

disable_automounter

case $TARGET_TYPE in
    block)
	installer_main "$dev"
	;;
    dir)
	# TODO: not currently implemented
	;;
    image)
	export TARGET_TYPE=$TARGET_TYPE

	size=7G
	if [ -n "${TARGET_DISK_SIZE}" ]; then
	    size=${TARGET_DISK_SIZE}
	fi

	for app in qemu-img partprobe qemu-nbd btrfs; do
	    verify_utility $app || { echo >&2 "ERROR: $app is not available"; exit 1; }
	done

	verify_root_user ||  { echo >&2 "ERROR: cubeit must be run as root"; exit 1; }

	qemu-img create $target $size

	if [ -n "$NBD" ]; then
	    device=
	    for i in `ls /dev/nbd*`; do
		qemu-nbd --nocache -c $i $target >/dev/null 2>&1
		if [ $? -eq 0 ]; then
		    echo "using nbd device $i"
		    device=$i
		    break
		fi
	    done

	    if [ -z "$device" ]; then
		debugmsg ${DEBUG_CRIT} "No valid or free nbd device found"
		false
		assert $?
	    fi
	else
	    device=`losetup -f --show $target`
	    if [ -z "$device" ]; then
		debugmsg ${DEBUG_CRIT} "[ERROR]: No free loop devices, try nbd ?"
		false
		assert $?
	    fi
	fi

	if [ -z "${TARGET_CONFIG_FILE}" ]; then
	    if [ -n "${CONFIG_FILE}" ]; then
		TARGET_CONFIG_FILE=${CONFIG_FILE}
	    else
		TARGET_CONFIG_FILE="config-live.sh"
	    fi
	fi

	if [ -n "${FDISK_PARTITION_LAYOUT_INPUT}" ];then
	    debugmsg ${DEBUG_INFO} "$INSTALLERS_DIR/cubeit ${INSTALL_ROOTFS} \
		    --config ${TARGET_CONFIG_FILE} $device --partition_layout ${FDISK_PARTITION_LAYOUT_INPUT}"
	    $INSTALLERS_DIR/cubeit-installer -b --artifacts ${ARTIFACTS_DIR} \
		    --config ${TARGET_CONFIG_FILE} --partition_layout ${FDISK_PARTITION_LAYOUT_INPUT} ${INSTALL_ROOTFS} $device
	else
	    debugmsg ${DEBUG_INFO} "$INSTALLERS_DIR/cubeit ${INSTALL_ROOTFS} --config ${TARGET_CONFIG_FILE} $device"
	    $INSTALLERS_DIR/cubeit-installer -b --artifacts ${ARTIFACTS_DIR} \
		    --config ${TARGET_CONFIG_FILE} ${INSTALL_ROOTFS} $device
	fi

	if [ -n "$NBD" ]; then
	    qemu-nbd -d $device
	else
	    losetup -d $device
	fi
	# Chown the image file to the owner of the directory
	# it was written to
	if [ -e $target ] ; then
		d=$(dirname $target)
		chown $(stat -c "%u" $d) $target
	fi

	;;
esac

restore_automounter

exit 0
